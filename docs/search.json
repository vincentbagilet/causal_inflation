{
  "articles": [
    {
      "path": "DID.html",
      "title": "Simulations Event study/DID",
      "description": "In this document, we run a simulation exercise to illustrate the loss in power and resulting type M error when the number of events in a Difference In Differences design decreases.",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "LÃ©o Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSummary and intuition\nAn illustrative exampleModelisation choices\nData generation\n\n\n\nbody {\ntext-align: justify}\nSummary and intuition\nIn the case of Event studies and DiD, the OVB/type M trade-off is mediated by the number of events.\nAn illustrative example\nFor readability and to illustrate this loss in power, we consider an example setting. For this illustration we could use a large variety of Data Genereting Processes (DGP), both in terms of distribution of the variables and of relations between them. We narrow this down to an example setting, considering an analysis of health impacts of air pollution. Our point should stand in more general settings.\nA threat of confounders often arises when analyzing the health effects of air pollution. To estimate such an effect causally, one can consider exogeneous shocks to air pollution. In the present analysis, we consider the example of plant closures as exogeneous shocks.\nModelisation choices\nIn the present analysis, we build our simulations to replicate an analysis of the causal health effects of air pollution, using plant closures as an exogeneous shifter in air pollution levels. In such analyses, the data is often at the city-daily level. Hospital admissions are usual health outcomes considered in such analyses.\nThe DGP can be represented using the following Directed Acyclic Graph (DAG):\n\n\n\nThis DAG makes it clear that in substance, we are instrumenting air pollution level by plant closure.\nThe DGP for the number of admissions at the hospital in city \\(c\\) at time \\(t\\) is as follows:\n\\[Admissions_{ct} = \\xi + \\gamma Poll_{ct} + \\delta U_{ct} + e_{ct}\\] Where \\(\\xi\\) is a constant, \\(U\\) represents an unobserved variable and \\(e \\sim \\mathcal{N}(0, \\sigma_{e)\\) noise. The DGP for the pollution data is as follows:\n\\[Poll_{ct} = \\mu + \\lambda T_{ct} + \\eta U_{ct} + \\tilde{e}_{ct}\\] Where \\(\\mu\\) is a constant,\\(T_{ct}\\) is the treatment, equal to 1 if there is a plant closure in city \\(c\\) at time \\(t\\) and zero otherwise and \\(\\tilde{e} \\sim \\mathcal{N}(0, \\sigma_{\\tilde{e})\\) noise.\nThe effect of plant closures, the treatment, on health is often estimated using a reduced form approach, regressing health in city \\(c\\) at time \\(t\\) on the treatment. In our case, that yields to estimating the following equation: m \\[Admissions_{ct} = \\alpha + \\beta T_{ct} + \\epsilon_{ct}\\] To simplify, we consider the following assumptions:\nPollution and hospital admissions are not correlated across cities nor time. This is very simplistic but if anything should make it easier to identify the effect of interest,\nThe unobserved variable \\(U\\) is drawn from a normal distribution,\nIn a first step, we consider homogeneous treatment effects\nA proportion \\(p_{treat}\\) of individuals are ever treated over the period. Hence, a proportion of \\(1-p_{treat}\\) individuals are never treated over the period. I draw these individual at random. Note that the value of the individual identifiers do not matter here. So I could assume that the non-treated individuals are those with the larger individual ids for instance,\nThe implementation of the treatment can be staggered or not. If it is not staggered, the treatment date is set to be in the middle of the period\nThe treatment can vary along two dimensions, time and individual. Details are given below.\nMore precisely, I set:\n\\(N_C\\) the number of cities\n\\(N_T\\) the number of periods\n\\(U_{ct} \\sim \\mathcal{N}(\\mu_{u}, \\sigma_{u}^{2})\\)\n\\(e_{it} \\sim \\mathcal{N}(0, \\sigma_{e}^{2})\\), \\(\\tilde{e}_{it} \\sim \\mathcal{N}(0, \\sigma_{\\tilde{e}}^{2})\\) noises\n\\(T_{ct}\\) represent the treatment allocation, it is equal to one if a plant closes in city \\(c\\) at time \\(t\\) and 0 otherwise,\n\\(Poll\\) and \\(Amissions\\) are created as described above\n\\(\\beta_{it}\\) is represents the magnitude of the treatment effect and is linked to the input parameter beta.\nAcross individuals, the treatment can either be:\nhomogeneous: het_indiv == homogeneous, for each individual, the treatment is equal to beta,\nrandom: het_indiv == random, for each individual, the treatment is drawn from \\(\\mathcal{U}(0.5\\beta, 1.5\\beta)\\),\nlarger for those that are treated first: het_indiv == large_first, for each individual, the treatment is equal to \\(N_T - \\beta\\).\n\nAcross time, the effect of the treatment can either be\nconstant: het_time == constant,\nincreasing linearly in time: het_time == linear.\n\n\nI also create a bunch of variables that can be useful:\n\\(InTreatment_i\\) equal to 1 if individual \\(i\\) ever gets treated,\n\\(t^{event}_i\\) equal to the date at which individual \\(i\\) gets treated,\n\\(t^{centered}_i\\) representing the distance in terms of period to the beginning of the treatment for individual \\(i\\),\n\\(Post_{it}\\) equal to 1 if the period \\(t\\) is after the treatment has begun for individual \\(i\\). This variable is only useful for non-staggered treatment allocation,\nData generation\nI write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\n\n\ngenerate_data_TWFE <- function(N_C,\n                               N_T,\n                               sigma_e,\n                               p_treat,\n                               staggered,\n                               het_indiv,\n                               het_time,\n                               alpha,\n                               beta,\n                               mu_indiv_fe = 0, \n                               sigma_indiv_fe = 0,\n                               mu_time_fe = 0, \n                               sigma_time_fe = 0,\n                               mu_x = 0, \n                               sigma_x = 0,\n                               gamma = 0\n                             ) {\n\n  if (!is.logical(staggered)) {stop(\"staggered must be logical\")} \n  if (!(het_indiv %in% c(\"large_first\", \"random\", \"homogeneous\"))) {\n    stop('het_indiv must be either \"large_first\", \"random\" or \"homogeneous\"')\n  } \n  if (!(het_time %in% c(\"constant\", \"linear\"))) {\n    stop('het_time must be either \"constant\" or \"linear\"')\n  } \n  \n  data <- tibble(indiv = 1:N_C) %>%\n    mutate(InTreatment = (indiv %in% sample(1:N_C, floor(N_C*p_treat)))) %>% \n    crossing(t = 1:N_T) %>%\n    group_by(indiv) %>%\n    mutate(\n      indiv_fe = rnorm(1, mu_indiv_fe, sigma_indiv_fe),\n      t_event = ifelse(staggered, sample(2:(N_T - 1), 1), floor(N_T/2)), \n        #I use 2:(N_T-1) to have a pre and post period\n      t_event = ifelse(InTreatment, t_event, NA),\n      beta_i = case_when(\n        het_indiv == \"large_first\" ~ N_T-t_event,\n        het_indiv == \"random\" ~ runif(1, beta*0.5, beta*1.5), \n        het_indiv == \"homogeneous\" ~ beta\n      ),\n      beta_i = ifelse(is.na(t_event), 0, beta_i)\n    ) %>%\n    ungroup() %>%\n    group_by(t) %>%\n    mutate(time_fe = rnorm(1, mu_time_fe, sigma_time_fe)) %>%\n    ungroup() %>%\n    mutate(\n      post = (t > t_event),\n      treated = InTreatment & post, \n      beta_i = ifelse(\n        het_time == \"linear\" & post & !is.na(t_event),\n        beta_i*(t - t_event), \n        beta_i\n      ),\n      t_centered = t - t_event,\n      x = rnorm(nrow(.), mu_x, sigma_x),\n      e = rnorm(nrow(.), 0, sigma_e),\n      y0 = alpha + gamma * x + indiv_fe + time_fe + e,\n      y1 = y0 + beta_i,\n      y = treated*y1 + (1 - treated)*y0\n    )\n  \n  return(data)\n}\n\n\n\nI set baseline values for the parameters as very standard. These values are arbitrary.\n\n\nbaseline_parameters_TWFE <- tibble(\n  N_C = 20,\n  N_T = 50,\n  sigma_e = 1,\n  p_treat = 0.8,\n  staggered = TRUE,\n  het_indiv = \"homogeneous\",\n  het_time = \"constant\",\n  alpha = 1,\n  beta = 1\n)\n\n\n\nHere is an example of data created with the data generating process and baseline parameter values, for 2 individuals and 8 time periods:\n\nindiv\nt\ny\nInTreatment\npost\ntreated\nt_centered\ne\n1\n1\n-0.3027185\nFALSE\nNA\nFALSE\nNA\n-1.3027185\n1\n2\n0.6797515\nFALSE\nNA\nFALSE\nNA\n-0.3202485\n1\n3\n1.2764429\nFALSE\nNA\nFALSE\nNA\n0.2764429\n1\n4\n-1.3357458\nFALSE\nNA\nFALSE\nNA\n-2.3357458\n1\n5\n2.3282236\nFALSE\nNA\nFALSE\nNA\n1.3282236\n1\n6\n1.2089710\nFALSE\nNA\nFALSE\nNA\n0.2089710\n1\n7\n1.4944672\nFALSE\nNA\nFALSE\nNA\n0.4944672\n1\n8\n-1.2349025\nFALSE\nNA\nFALSE\nNA\n-2.2349025\n2\n1\n1.5283390\nTRUE\nFALSE\nFALSE\n-4\n0.5283390\n2\n2\n0.6460458\nTRUE\nFALSE\nFALSE\n-3\n-0.3539542\n2\n3\n0.0204227\nTRUE\nFALSE\nFALSE\n-2\n-0.9795773\n2\n4\n1.4449037\nTRUE\nFALSE\nFALSE\n-1\n0.4449037\n2\n5\n0.5956687\nTRUE\nFALSE\nFALSE\n0\n-0.4043313\n2\n6\n0.9593451\nTRUE\nTRUE\nTRUE\n1\n-1.0406549\n2\n7\n2.1544370\nTRUE\nTRUE\nTRUE\n2\n0.1544370\n2\n8\n2.2039123\nTRUE\nTRUE\nTRUE\n3\n0.2039123\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "last_modified": "2021-12-07T17:38:57-05:00"
    },
    {
      "path": "index.html",
      "title": "Unbiased but Inflated Causal Effects",
      "author": [],
      "contents": "\n\n          \n      \n      Unbiased but Inflated Causal Effects\n      \n      \n      Home\n      Intuition\n      \n      \n      Simulations\n       \n      â¾\n      \n      \n      RDD\n      IV\n      Matching\n      DiD / Event study\n      \n      \n      \n      \n      \n      â°\n      \n      \n      \n        \n          \n            \n              \n            \n              Unbiased but Inflated Causal Effects\n            \n            \n              \n                \n                    \n                      \n                         GitHub\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            Hi and welcome!\n            This website gathers code and additional material for the paper âUnbiased but Inflated Causal Effectsâ by Vincent Bagilet and LÃ©o Zabrocki.\n            The website is under construction and the analysis is still at a preliminary stage.\n          \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Unbiased but Inflated Causal Effects\n            \n            \n              \n                \n                                    \n                    \n                       GitHub\n                    \n                  \n                                  \n              \n            \n            \n              Hi and welcome!\n              This website gathers code and additional material for the paper âUnbiased but Inflated Causal Effectsâ by Vincent Bagilet and LÃ©o Zabrocki.\n              The website is under construction and the analysis is still at a preliminary stage.\n            \n        \n      \n    \n\n    \n    \n    ",
      "last_modified": "2021-12-07T20:09:43-05:00"
    },
    {
      "path": "IV.html",
      "title": "Simulations IV",
      "description": "In this document, we run a simulation exercise to illustrate the existence of a trade-off between Omitted Variable Bias (OVB) and type M error in the context of an Instrumental Variable (IV) strategy.",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "LÃ©o Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSummary and intuition\nAn illustrative exampleModelisation choices\nData generation\nEstimation\nOne simulation\nAll simulations\n\nAnalysis of the resultsQuick exploration\nComputing bias and type M\nGraph\n\n\n\nbody {\ntext-align: justify}\nSummary and intuition\nIn the case of the IV, the OVB/type M trade-off is mediated by the âstrengthâ of the instrument considered.\nAn illustrative example\nTo illustrate this trade-off between OVB and type M error, we consider a standard application of the IV design in environmental economics.\nModelisation choices\nIn the present analysis, we build our simulations to replicate a similar type of quasi-experiment.\nThe DGP can be represented using the following Directed Acyclic Graph (DAG):\n\n\n\nTo simplify, we consider the following assumptions:\nMore precisely, we set:\n\\(N\\) the number of observations\n\\(Z \\sim \\mathcal{N}(0, \\sigma_{z}^{2})\\) or \\(Z \\sim \\text{Bernoulli}(p_z)\\) the instrument\n\\(U \\sim \\mathcal{N}(0, \\sigma_{u}^{2})\\) the unobserved variable\n\\(X = \\alpha_x + \\gamma_x Z + \\delta_x U + e_x\\) the dependent variable and where \\(e_x \\sim \\mathcal{N}(0, \\sigma_{x}^{2})\\)\n\\(Y = \\alpha_y + \\beta X + \\delta_y U + e_y\\) the independent variable and where \\(e_y \\sim \\mathcal{N}(0, \\sigma_{y}^{2})\\)\nData generation\nWe write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\nNote that the parameter type_z describes whether z is a random sample from a normal or bernoulli distribution. It can take the values normal or bernoulli.\n\n\ngenerate_data_IV <- function(N,\n                             type_z, #\"normal\" or \"bernoulli\"\n                             param_z,\n                             sigma_u,\n                             sigma_ex,\n                             sigma_ey,\n                             alpha_y,\n                             alpha_x,\n                             treatment_effect,\n                             iv_strength,\n                             ovb_intensity\n                             ) {\n  \n  if (type_z == \"bernoulli\") {\n    z_gen <- rbernoulli(N, param_z)\n  } else if (type_z == \"normal\") {\n    z_gen <- rnorm(N, 0, param_z)\n  } else {\n    stop(\"type_z must be either 'bernoulli' or 'normal'\")\n  } \n  \n  data <- tibble(id = 1:N) %>% \n    mutate(\n      z = z_gen,\n      u = rnorm(nrow(.), 0, sigma_u),\n      e_x = rnorm(nrow(.), 0, sigma_ex),\n      e_y = rnorm(nrow(.), 0, sigma_ey),\n      x = alpha_x + iv_strength*z + ovb_intensity*u + e_x,\n      y = alpha_y + treatment_effect*x + ovb_intensity*u + e_y\n    )\n  \n  return(data)\n}\n\n\n\nWe set baseline values for the parameters to emulate a somehow realistic observational study in this field. The set of parameters may produce test score outside of the range 0-100 in some iterations but that does not affect the analysis. We add the parameter value for delta separately as we will vary the value later and will reuse the vector baseline_parameters_RDD.\n\n\nsimple_parameters_IV <- tibble(\n  N = 500,\n  type_z = \"normal\",\n  param_z = 1,\n  sigma_u = 1,\n  sigma_ex = 1,\n  sigma_ey = 1,\n  alpha_y = 0,\n  alpha_x = 0,\n  treatment_effect = 1\n)\n\n\n\nHere is an example of data created with our data generating process:\n\nid\nz\nu\ne_x\ne_y\nx\ny\n1\n0.6749495\n-0.6966953\n0.4591458\n-1.6713348\n0.3154576\n-1.6345554\n2\n2.0708103\n-0.0869418\n-0.9198077\n1.4920900\n-0.5404224\n0.9168908\n3\n1.5453063\n0.6905440\n-0.5664398\n1.4903058\n0.0188391\n1.7853624\n4\n-0.6715010\n2.4652788\n-0.2432481\n1.3939398\n0.6085633\n2.9886146\n5\n-1.3766919\n-0.3431099\n-1.0145088\n0.2978159\n-1.4270911\n-1.2665192\n6\n-1.2704880\n-1.0694657\n-0.2936311\n0.3177837\n-0.9755150\n-1.0855176\n7\n-1.2843228\n0.1386287\n-0.0501408\n0.5420679\n-0.2515539\n0.3459654\n8\n-0.4509534\n1.3767604\n-1.4449848\n0.9467179\n-0.9844713\n0.5129507\n9\n-0.7837551\n-0.6998886\n0.7351988\n-1.4222861\n0.2984923\n-1.4037492\n10\n0.7971306\n-0.1377175\n1.6555806\n-0.8771356\n1.7599197\n0.8276971\n\n\n\n\n\n\n\n\n\n\nEstimation\nAfter generating the data, we can run an estimation. We want to compare the IV and the OLS for different IV strength values. Hence, we need to estimate both an IV and an OLS and return both set of outcomes of interest.\n\n\nestimate_IV <- function(data) {\n  reg_IV <- ivreg(\n    data = data, \n    formula = y ~ x | z\n    ) %>% \n    broom::tidy() %>%\n    mutate(model = \"IV\")\n  \n  reg_OLS <- lm(\n    data = data, \n    formula = y ~ x\n    ) %>% \n    broom::tidy() %>%\n    mutate(model = \"OLS\")\n  \n  reg_OLS_unbiased <- lm(\n    data = data, \n    formula = y ~ x + u\n    ) %>% \n    broom::tidy() %>%\n    mutate(model = \"OLS unbiased\")\n  \n  reg <- reg_IV %>% \n    rbind(reg_OLS) %>% \n    rbind(reg_OLS_unbiased) %>% \n    filter(term == \"x\") %>%\n    rename(p_value = p.value, se = std.error) %>%\n    select(estimate, p_value, se, model) %>% \n  \n  return(reg)\n}\n\n\n\nOne simulation\nWe can now run a simulation, combining generate_data_IV and estimate_IV. To do so we create the function compute_sim_IV. This simple function takes as input the various parameters along with the bandwidth size, bw. It returns a table with the estimate of the treatment, its p-value and standard error, the true effect and the bandwidth and intensity of the OVB considered (ovb_intensity). Note for now, that we do not store the values of the other parameters for simplicity because we consider them fixed over the study.\n\n\ncompute_sim_IV <- function(N,\n                                  type_z,\n                                  param_z,\n                                  sigma_u,\n                                  sigma_ex,\n                                  sigma_ey,\n                                  alpha_y,\n                                  alpha_x,\n                                  treatment_effect,\n                                  iv_strength,\n                                  ovb_intensity) {\n  generate_data_IV(\n    N = N,\n    type_z = type_z,\n    sigma_u = sigma_u,\n    param_z = param_z,\n    sigma_ex = sigma_ex,\n    sigma_ey = sigma_ey,\n    alpha_y = alpha_y,\n    alpha_x = alpha_x,\n    treatment_effect = treatment_effect,\n    iv_strength = iv_strength,\n    ovb_intensity = ovb_intensity\n  ) %>%\n    estimate_IV() %>%\n    mutate(\n      iv_strength = iv_strength,\n      ovb_intensity = ovb_intensity\n    )\n} \n\n\n\nAll simulations\nWe will run the simulations for different sets of parameters by mapping our compute_sim_IV function on each set of parameters. We thus create a table with all the values of the parameters we want to test param_IV. Note that in this table each set of parameters appears n_iter times as we want to run the analysis \\(n_{iter}\\) times for each set of parameters.\n\n\nbaseline_parameters <- tibble(\n  N = 500,\n  type_z = \"normal\",\n  param_z = 1,\n  sigma_u = 1,\n  sigma_ex = 1,\n  sigma_ey = 1,\n  alpha_y = 0,\n  alpha_x = 0,\n  treatment_effect = 1\n)\n\nfixed_parameters <- baseline_parameters #%>% rbind(...)\nvect_iv_strength <- c(seq(0.05, 0.4, 0.05), seq(0.4, 0.6, 0.1))\n# vect_iv_strength <- c(0.1)\nvect_ovb_intensity <- c(0.4)\nn_iter <- 1000\n\nparam_IV <- fixed_parameters %>% \n  crossing(vect_iv_strength, vect_ovb_intensity) %>% \n  rename(iv_strength = vect_iv_strength, ovb_intensity = vect_ovb_intensity) %>% \n  crossing(rep_id = 1:n_iter) %>% \n  select(-rep_id)\n\n\n\nWe then run the simulations by mapping our compute_sim_IV function on param_IV.\n\n\ntic()\nsimulations_IV <- pmap_dfr(param_IV, compute_sim_IV)\nbeep()\ntoc()\n\n# saveRDS(simulations_IV, here(\"Outputs/simulations_IV.RDS\"))\n\n\n\nAnalysis of the results\nQuick exploration\nFirst, we quickly explore the results.\n\n\n\nWe notice that the OLS is always biased and that the IV is never biased. However, for limited IV strengths, the distribution of the estimates flattens. The smaller the IV strength, the most like it is to get an estimate away from the true value, even though the expected value remains equal to the true effect size. \nComputing bias and type M\nWe want to compare \\(\\mathbb{E}[\\beta_0 - \\widehat{\\beta_{i}}]\\) and \\(\\mathbb{E}[|\\beta_0 - \\widehat{\\beta_{RDD}}||signif]\\). The first term represents the bias and the second term represents the type M error. This terms depend on the effect size. To enable comparison across simulation and getting terms independent of effect sizes, we also compute the average of the ratios between the estimate and the true effect, conditional on significance.\n\n\nsummarise_simulations <- function(data, true_effect = 1) {\n  data %>%\n    mutate(significant = (p_value <= 0.05)) %>% \n    group_by(ovb_intensity, iv_strength, model) %>%\n    summarise(\n      power = mean(significant, na.rm = TRUE)*100, \n      type_m = mean(ifelse(significant, abs(estimate - true_effect), NA), na.rm = TRUE),\n      bias_signif = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      bias_all_median = median(estimate/true_effect, na.rm = TRUE),\n      # mean_f_stat = mean(f_stat, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup()\n} \n\nsummary_simulations_IV <- summarise_simulations(simulations_IV)\n# saveRDS(summary_simulations_IV, here(\"Outputs/summary_simulations_IV.RDS\"))\n\n\n\nGraph\nTo analyze our results, we build a unique and simple graph:\n\n\n\nOf course, if one considers all estimates, as the IV is unbiased, this issue does not arise. For now, we consider the median because for very low IV strength, we get very extreme values. We need to investigate this further.\n\n\n\n\n\n\n",
      "last_modified": "2021-12-07T17:39:05-05:00"
    },
    {
      "path": "Matching.html",
      "title": "Matching Simulations",
      "description": "\"In this document, we run a simulation exercise to illustrate the existence of a trade-off between Omitted Variable Bias (OVB) and type M error in the context of a matching procedure.\"\n",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "LÃ©o Zabrocki",
          "url": "https://lzabrocki.github.io/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nPackages Loading\nData Generating ProcedureGeneral Approach\nFunction to Generate the Data\nEDA for One Dataset\n\nOutcome Regression Analysis\nMatching ProcedureProposensity Score Function\nSimulations\n\n\n\nbody {\ntext-align: justify}\nIn this document, we show through simulations the Type M error - omitted variable bias trade-off for observational studies relying on matching methods. We create fake-data similar to those used for analyzing non-randomized labor training program. Should you have any questions or find coding errors, please do not hesitate to reach us at vincent.bagilet@columbia.edu and leo.zabrocki@psemail.eu.\nPackages Loading\nWe first load the required packages to set-up the simulations:\n\n\n# load required packages\nlibrary(knitr) # for creating the R Markdown document\nlibrary(tidyverse) # for data manipulation and visualization\nlibrary(MatchIt) # for matching analysis\nlibrary(lmtest) # for modifying regression standard errors\nlibrary(sandwich) # for robust and cluster robust standard errors\nlibrary(DT) # for displaying the data as tables\nlibrary(mediocrethemes) # vincent's custom ggplot2 theme\nlibrary(tictoc) # for measuring running time\nlibrary(beepr) # for making a sound when the code is done\nlibrary(here)\n\n# set ggplot theme\nset_mediocre_all(pal = \"coty\") #, background = TRUE) #for presentations\n\n\n\nData Generating Procedure\nGeneral Approach\nTo illustrate the the Type M error - OVB trade-off, we simulate fake-data from a non-randomized labor training program targeting young individuals:\nWe first create the units identifiers (id).\nWe then simulate 4 correlated binary covariates:\nThe true propensity score variable true_ps is drawn from \\(N(0.3, 0.1)\\) for control units and from \\(N(0.5, 0.12)\\) for treated units.\nOnce the the true propensity scores are created, we define the potential outcomes of each individual. Here, potential outcomes represent the income (in euros) of the individuals if they undertake the training program or not. The potential outcome without treatment adoption, Y(0), is simulated using the following equation:\ny_0 = 2000 * true_ps + rnorm(n(), mean = 300, sd = 200)\nWe finally simulate the potential outcomes when individuals benefit from the training program. The average treatment effect on the treated (ATT) was set to 100. The average treatment effect on the control (ATC) was set to 50.\nFunction to Generate the Data\nWe display below the code for the function generate_data_matching() which creates the dataset. Its single argument takes the desired sample size.\n\n\ngenerate_data_matching  <- function(sample_size) {\n  data <- tibble(id = 1:sample_size) %>%\n    mutate(\n      treatment = rbinom(n = sample_size, size = 1, prob = 0.25),\n      true_ps = ifelse(\n        treatment == 0,\n        rnorm(n(), mean = 0.3, sd = 0.1),\n        rnorm(n(), mean = 0.5, sd = 0.12)\n      ),\n      true_ps = case_when(true_ps > 1 ~ 1,\n                          true_ps < 0 ~ 0,\n                          true_ps >= 0 & true_ps <= 1 ~ true_ps),\n      # generate the potential outcomes\n      y_0 = 2000 * true_ps + rnorm(n(), mean = 300, sd = 200),\n      y_0 = y_0 %>% round(., 0),\n      y_1 = ifelse(treatment == 1,\n                   y_0 + 100,\n                   y_0 + 50),\n      # generate observed outcomes\n      y_obs = ifelse(treatment == 1, y_1, y_0) %>% round(., 0)\n    )\n  return(data)\n}\n\n\n\nEDA for One Dataset\nWe run one iteration of the function generate_data_matching() to explore the resulting data with 500 units:\n\n\n# run the function for a sample of 500 units\ndata <- generate_data_matching(500)\n\n# display the table\ndatatable(data)\n\n\n\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"306\",\"307\",\"308\",\"309\",\"310\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"320\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"330\",\"331\",\"332\",\"333\",\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"350\",\"351\",\"352\",\"353\",\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"360\",\"361\",\"362\",\"363\",\"364\",\"365\",\"366\",\"367\",\"368\",\"369\",\"370\",\"371\",\"372\",\"373\",\"374\",\"375\",\"376\",\"377\",\"378\",\"379\",\"380\",\"381\",\"382\",\"383\",\"384\",\"385\",\"386\",\"387\",\"388\",\"389\",\"390\",\"391\",\"392\",\"393\",\"394\",\"395\",\"396\",\"397\",\"398\",\"399\",\"400\",\"401\",\"402\",\"403\",\"404\",\"405\",\"406\",\"407\",\"408\",\"409\",\"410\",\"411\",\"412\",\"413\",\"414\",\"415\",\"416\",\"417\",\"418\",\"419\",\"420\",\"421\",\"422\",\"423\",\"424\",\"425\",\"426\",\"427\",\"428\",\"429\",\"430\",\"431\",\"432\",\"433\",\"434\",\"435\",\"436\",\"437\",\"438\",\"439\",\"440\",\"441\",\"442\",\"443\",\"444\",\"445\",\"446\",\"447\",\"448\",\"449\",\"450\",\"451\",\"452\",\"453\",\"454\",\"455\",\"456\",\"457\",\"458\",\"459\",\"460\",\"461\",\"462\",\"463\",\"464\",\"465\",\"466\",\"467\",\"468\",\"469\",\"470\",\"471\",\"472\",\"473\",\"474\",\"475\",\"476\",\"477\",\"478\",\"479\",\"480\",\"481\",\"482\",\"483\",\"484\",\"485\",\"486\",\"487\",\"488\",\"489\",\"490\",\"491\",\"492\",\"493\",\"494\",\"495\",\"496\",\"497\",\"498\",\"499\",\"500\"],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500],[1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,0,0,0,0,1,0,0],[0.559063042201389,0.297058206781059,0.38286606686143,0.315580691016999,0.38734021174613,0.462561608763536,0.20713681892951,0.22716789149756,0.33556968510204,0.420487996150515,0.355111422979296,0.284257815270126,0.326974005368033,0.673473702470663,0.388807652649542,0.407721865578738,0.424651402785394,0.499007943641052,0.465812903037936,0.368400162411272,0.481125964721498,0.436361263761468,0.316044749144562,0.555887555322006,0.47640187987432,0.289274397914431,0.189032727249243,0.23360956822358,0.377339853689366,0.624908823177415,0.246502112805759,0.752733526216872,0.37120876564002,0.321266371569823,0.11102296913576,0.165554619185599,0.375989854107958,0.20603257741416,0.363309448031546,0.272898832946522,0.356060463530203,0.503712309669973,0.32026702482087,0.395155200371825,0.529096158996986,0.46200828983265,0.288963538524667,0.240284727970072,0.271522513035779,0.270419966131231,0.253559181987845,0.579443712802302,0.328424050376005,0.304867764743835,0.464082696968944,0.147729269113456,0.257329347741303,0.555853567024326,0.494714510355911,0.327490514167996,0.214548991345532,0.181600765393454,0.287413171295885,0.234977693789655,0.294508086752732,0.527421518558778,0.424655997727391,0.518075425332987,0.298731844475535,0.491776333843119,0.375927383220045,0.205905053897915,0.510925838415129,0.337832258138342,0.410535971200278,0.447818372261965,0.3054342157801,0.70797325523435,0.247012987212349,0.130725640669835,0.310489041391426,0.415069713319983,0.244485709681525,0.525130893709961,0.278523074731156,0.299947953642062,0.12506401916048,0.317349421719241,0.351496600739326,0.490051654361765,0.364903688085793,0.583839303357034,0.506124550085856,0.320774321950397,0.308975777357383,0.351005675678228,0.275937888778775,0.38160394661849,0.330416407215524,0.254287830780311,0.495290066282434,0.21305757795462,0.320746251069274,0.298278032300485,0.198794214812224,0.538342049017335,0.437983605777213,0.305311007218787,0.223032872511112,0.348122396150433,0.521056535553653,0.67455386041559,0.312448991200725,0.691489480974342,0.13628045640143,0.21345155589732,0.607175520401255,0.439504954307904,0.455543820507968,0.470180017295015,0.335229309401486,0.501665952662309,0.219769195248451,0.252309603364644,0.574403395962177,0.248946407840398,0.162313808460657,0.277726150350434,0.589486222282232,0.743401503332646,0.221285032094152,0.339597516489265,0.375628092231891,0.38932080323143,0.239038173732734,0.283844012456447,0.311673312523791,0.190849564114325,0.679318657418093,0.408778529026858,0.454024204211479,0.279348582382078,0.389258527532768,0.151335130682051,0.378070975568939,0.30465214289629,0.40306905067201,0.183104621384738,0.315365910890439,0.555515998244402,0.423432401523586,0.326017919534871,0.27834527971731,0.42493662090228,0.328300775447246,0.318715848405014,0.399108715302821,0.224157005434237,0.298982747431967,0.266142686232335,0.343203854447779,0.318329384468383,0.467321413140501,0.311864131582892,0.427904918498513,0.54502770455966,0.675738449770899,0.436228957355436,0.266885956240594,0.277168369909711,0.280348668147361,0.319062851812983,0.313230694496568,0.539996357693813,0.336606158366169,0.398673089363016,0.794221767795996,0.301931150522193,0.507641226505511,0.106514089656771,0.179543533935663,0.263785937165739,0.474098439369039,0.45249867864165,0.661956529155823,0.286643632491571,0.270527609509962,0.410555879121695,0.406995188492146,0.340717223853439,0.295786762562827,0.499744491843214,0.269530656337402,0.299521381566918,0.505113461386199,0.498289419896903,0.323041215688306,0.408695514165611,0.368256850462343,0.284404594557314,0.23960506870188,0.171076780441467,0.355280055514728,0.337061286409907,0.461941165521008,0.266748088431605,0.689242243220609,0.26627822082993,0.251235919722783,0.668581594580834,0.363437693827847,0.385763885980565,0.286882954214306,0.437724817982808,0.527579586087578,0.199039262512512,0.433045271088438,0.290344468801861,0.309759375390636,0.346762660318485,0.581049571631336,0.299430369335867,0.439730073802714,0.55074850450857,0.182850092102198,0.282950171881918,0.236247035499798,0.59168899987685,0.339668284145003,0.618613562121717,0.192987988891241,0.0857259703518043,0.458477508241944,0.399129586483323,0.542779295199031,0.309761050187143,0.377190273091981,0.300219120886233,0.222136551824876,0.541630958996474,0.0952597139101196,0.175621058984768,0.3567854004576,0.246577829592103,0.501403640350954,0.235392247811246,0.147365453382481,0.538225066546829,0.298488319302485,0.449274868995518,0.121278881767315,0.10841026632155,0.116748630440437,0.33110457515427,0.434849437247556,0.654002391871199,0.340086878346905,0.252614812262438,0.533368146253635,0.173634740707823,0.106011052345767,0.173852864111466,0.306561256638043,0.425988092261026,0.399345097353289,0.407529032799008,0.348676892603099,0.239728205212984,0.308223075815271,0.556699410054451,0.299344104742243,0.359053979518648,0.63075898509951,0.354438597440803,0.299810529636377,0.255690160941989,0.653967835516713,0.549734409867973,0.261047323943993,0.409284639584933,0.14237938928988,0.353713895728124,0.335113340227352,0.381861743975069,0.0293541542843802,0.132688119817711,0.26038755855353,0.22359716405944,0.533402930941918,0.277501376690547,0.190809408756026,0.423954624912331,0.335079478276043,0.495544865717082,0.369980366690883,0.26308317249955,0.509813638740965,0.321645391022844,0.457710610291766,0.567160460939845,0.224712730991345,0.358286669576114,0.386635278409789,0.272562042629795,0.256307589635534,0.39515098548676,0.587674068559525,0.366824217830491,0.303261417777698,0.434406032857471,0.648202873172512,0.372543300986365,0.46167668323604,0.359343115344294,0.260764909673982,0.242675258785073,0.338334232001858,0,0.500289991604678,0.276157323343737,0.439146298646043,0.554013810164459,0.207349272090865,0.367045771080163,0.493291785907835,0.534623521475497,0.474251779648502,0.308658180686043,0.351843199444367,0.480494869430615,0.203927581051778,0.343879581274329,0.449064100727844,0.421795791881998,0.466831185973324,0.668901220902387,0.341680018141298,0.400492066955251,0.609237113821814,0.318101941902973,0.551784170655002,0.388143627181115,0.416890142152283,0.137543026129397,0.256583581079477,0.201129158616483,0.25422575144322,0.31083598630968,0.216282161372802,0.550849457951999,0.221554788272537,0.587616734347502,0.442467949340144,0.650004828710271,0.243674085916816,0.389899180191631,0.345689907042423,0.266836405551197,0.475687047309133,0.286215009235593,0.300363144523452,0.605022596771921,0.720009432063885,0.198830622211043,0.180078107263466,0.34992917958875,0.476177949210137,0.257252994778814,0.31526871962621,0.239152290029192,0.227270928130747,0.444620967959424,0.507651948628355,0.332159296626467,0.368195843470216,0.224500896477237,0.531166194582231,0.34974745637601,0.507308804668367,0.275489191736255,0.477066008030631,0.336052372932395,0.379426230693332,0.233380603486151,0.538250681341892,0.399320677154106,0.326594870881869,0.293064032938082,0.296541330677501,0.49296534149294,0.181457501107864,0.359405304264846,0.744840188653129,0.178553871768308,0.301816806105774,0.564330768774705,0.20961934136175,0.367728855054402,0.27461435134413,0.305928978626553,0.22484321389052,0.52425176572386,0.178265910427404,0.362867815278119,0.273222996882343,0.198939801687019,0.444765240394129,0.430838974808782,0.581182552052221,0.295502554849976,0.530033460140198,0.228809902859627,0.368748775073267,0.137773109791602,0.206995827684325,0.456285529613113,0.2319497012538,0.321293624275523,0.443143509488967,0.363997614330225,0.150103915070705,0.503780420146805,0.305838562912756,0.383467047005432,0.0994347936300277,0.225989830181063,0.0584651572569226,0.288908694302557,0.193725540041898,0.234214977037773,0.537590540812829,0.356913042211341,0.518066117327398,0.187279347744078,0.356957072413692,0.210830785793214,0.398052680922799,0.315297922757959,0.50421164989662,0.277851580332395,0.285030616782615,0.458739417310344,0.289411939261052,0.245805657021384,0.602813156018506,0.131715707217058,0.404462539329373,0.432879363022769,0.220212984050316,0.444263348170669,0.279446700856502,0.282706214896243,0.462674349931839,0.205780058350304,0.259931673704694,0.298929490928617,0.44798019135461,0.569672495541335,0.214444222528389,0.20518571958644,0.532769794425009,0.42172369666211,0.258958195752021,0.396974884394675,0.533457814483237,0.389497919350745,0.123507333900273,0.532912408156596,0.240444111467976,0.336207829626554,0.40876049514613,0.36033434673961,0.366432484067162,0.382510503550122,0.378822220179873,0.306477570856435,0.334054597404935,0.336191204529737,0.209534179644426,0.422101588287643,0.378944117412479,0.313806574260172,0.191524290015149,0.291580310156025,0.26969343481719,0.392427990573793,0.389566772331534,0.151483253817116,0.355032162282858,0.367923452495486,0.768941039516397,0.29788572280616,0.479852631465563,0.23971634632362,0.220654849727666,0.188882983560817,0.231105747823931,0.378184079483051,0.254595597314815,0.200844655721919],[1194,1094,1191,933,1285,1480,650,735,1041,1275,1137,583,1170,1466,1120,1122,1482,1648,1442,1297,1207,943,1247,1372,1623,712,610,765,1198,1531,698,1807,610,787,458,831,1176,592,832,604,1269,1665,621,1180,1523,1203,651,1006,565,752,820,1634,1153,840,1283,686,945,1577,1333,1027,726,468,564,611,973,1259,1415,892,754,1678,1054,980,1244,775,1109,1399,748,1482,637,554,1168,1065,709,1237,977,856,502,629,780,1292,1240,1653,1304,917,642,960,1201,1204,950,628,1106,541,629,890,740,1584,1135,1242,965,963,1283,1326,1348,1753,546,569,1366,1017,1144,1096,579,1199,623,776,1437,757,471,1046,1470,2038,911,830,988,1170,845,710,1045,619,1768,1089,981,991,1359,721,943,899,1046,746,904,1457,974,781,1016,1247,823,765,1180,771,793,671,751,903,1546,705,912,1221,1171,957,724,1142,804,1024,1087,1627,815,937,1955,814,1319,651,596,968,1649,1080,1774,809,951,1168,1048,885,747,1556,861,733,1068,1153,992,1310,855,989,754,801,916,1098,1146,868,1705,1162,955,1690,1477,1238,847,1244,1177,817,1669,777,837,1272,1594,840,1145,1250,581,807,537,1508,1225,1211,559,100,916,1012,1281,771,1091,758,493,1429,250,461,802,944,926,767,1056,1929,474,1251,745,530,722,949,822,1302,984,1014,1600,454,183,532,1265,1285,1516,1072,1132,773,816,1357,1103,1092,1528,1108,1076,1121,1820,1298,911,1020,566,597,492,915,137,441,785,1245,1425,689,379,1293,794,1450,1399,655,1457,890,1148,1129,988,1071,1463,970,489,1145,1631,1129,826,936,1338,1138,1281,1092,948,747,1054,310,1743,565,1083,818,568,1122,1137,1613,1249,675,976,1260,458,782,1042,1364,1386,1507,1191,1287,1488,924,1589,1191,1292,431,1045,1038,675,1060,915,1215,981,1322,1026,1604,657,1288,1151,797,1112,1102,990,1844,1457,143,680,1235,1128,988,952,680,865,834,1531,867,1126,583,1303,1036,1648,953,1171,749,1029,754,1128,1430,930,789,1037,1218,644,821,1827,327,637,1116,885,1347,967,919,378,1441,378,945,853,931,1152,1517,1718,806,1286,422,1187,563,827,1703,830,902,1198,1050,497,1431,633,1176,544,695,210,889,728,702,1186,1252,1296,586,1099,827,989,659,1304,807,542,1094,756,885,1142,666,991,1027,636,1170,567,878,1384,1022,1180,845,1420,1491,450,289,1521,842,705,1044,1061,1147,780,1355,813,965,1280,1019,807,989,1146,501,839,1187,942,1208,1018,992,576,978,625,832,1175,457,1034,587,1968,1009,1435,481,914,760,1165,896,915,215],[1294,1144,1241,983,1335,1530,700,785,1091,1375,1237,633,1220,1566,1170,1172,1532,1748,1492,1347,1307,993,1297,1422,1673,762,660,815,1248,1631,748,1907,660,837,508,881,1226,642,882,654,1319,1765,671,1230,1623,1253,701,1056,615,802,870,1734,1203,890,1383,736,995,1677,1433,1077,776,518,614,661,1023,1359,1515,942,804,1728,1104,1030,1344,825,1159,1499,798,1582,687,604,1218,1165,759,1337,1027,906,552,679,830,1342,1290,1703,1404,967,692,1010,1251,1254,1000,678,1206,591,679,940,790,1684,1185,1292,1015,1013,1333,1426,1398,1853,596,619,1466,1067,1194,1196,629,1299,673,826,1537,807,521,1096,1570,2138,961,880,1038,1220,895,760,1095,669,1868,1139,1031,1041,1409,771,1043,949,1096,796,954,1507,1074,831,1066,1347,873,815,1230,821,843,721,801,953,1646,755,962,1321,1271,1057,774,1192,854,1074,1137,1727,915,987,2055,864,1369,701,646,1068,1749,1130,1874,859,1001,1218,1148,935,797,1656,911,833,1168,1253,1042,1360,905,1089,804,851,1016,1148,1196,918,1805,1212,1005,1790,1577,1338,947,1294,1227,867,1769,827,887,1322,1694,890,1195,1350,631,857,587,1608,1275,1311,609,200,966,1062,1381,821,1141,808,543,1529,300,511,852,994,1026,817,1106,2029,524,1351,795,580,772,999,872,1402,1034,1064,1700,504,233,582,1315,1335,1566,1122,1182,823,866,1457,1153,1142,1628,1158,1126,1171,1920,1398,961,1120,616,647,542,965,187,491,835,1295,1525,789,429,1393,844,1550,1449,705,1557,940,1248,1229,1038,1121,1513,1020,539,1195,1731,1179,876,1036,1438,1188,1381,1142,998,797,1104,360,1843,665,1183,918,618,1172,1237,1713,1349,725,1026,1310,508,832,1092,1414,1436,1607,1241,1337,1588,974,1689,1241,1342,481,1095,1088,775,1110,965,1315,1031,1422,1126,1704,707,1338,1201,847,1212,1152,1040,1894,1557,193,730,1285,1178,1038,1002,730,915,934,1581,917,1226,633,1353,1086,1698,1003,1271,799,1079,804,1228,1530,980,889,1087,1318,694,871,1927,377,687,1216,935,1397,1017,969,428,1541,428,995,903,981,1202,1617,1818,856,1386,472,1237,613,927,1753,880,952,1298,1100,547,1481,683,1226,594,745,260,939,778,802,1286,1302,1396,636,1149,877,1039,759,1404,857,592,1194,806,935,1242,716,1041,1127,686,1270,617,928,1434,1072,1230,895,1520,1591,500,339,1621,892,755,1144,1111,1197,830,1405,863,1015,1330,1069,857,1039,1246,551,889,1237,992,1258,1068,1042,626,1028,675,932,1275,507,1084,687,2068,1059,1535,531,964,810,1215,996,965,265],[1294,1094,1191,933,1285,1480,650,735,1041,1375,1237,583,1170,1566,1120,1122,1482,1748,1442,1297,1307,943,1247,1372,1623,712,610,765,1198,1631,698,1907,610,787,458,831,1176,592,832,604,1269,1765,621,1180,1623,1203,651,1006,565,752,820,1734,1153,840,1383,686,945,1677,1433,1027,726,468,564,611,973,1359,1515,892,754,1678,1054,980,1344,775,1109,1499,748,1582,637,554,1168,1165,709,1337,977,856,502,629,780,1292,1240,1653,1404,917,642,960,1201,1204,950,628,1206,541,629,890,740,1684,1135,1242,965,963,1283,1426,1348,1853,546,569,1466,1017,1144,1196,579,1299,623,776,1537,757,471,1046,1570,2138,911,830,988,1170,845,710,1045,619,1868,1089,981,991,1359,721,1043,899,1046,746,904,1457,1074,781,1016,1347,823,765,1180,771,793,671,751,903,1646,705,912,1321,1271,1057,724,1142,804,1024,1087,1727,915,937,2055,814,1319,651,596,1068,1749,1080,1874,809,951,1168,1148,885,747,1656,861,833,1168,1253,992,1310,855,1089,754,801,1016,1098,1146,868,1805,1162,955,1790,1577,1338,947,1244,1177,817,1769,777,837,1272,1694,840,1145,1350,581,807,537,1608,1225,1311,559,200,916,1012,1381,771,1091,758,493,1529,250,461,802,944,1026,767,1056,2029,474,1351,745,530,722,949,822,1402,984,1014,1700,454,183,532,1265,1285,1516,1072,1132,773,816,1457,1103,1092,1628,1108,1076,1121,1920,1398,911,1120,566,597,492,915,137,441,785,1245,1525,789,379,1393,794,1550,1399,655,1557,890,1248,1229,988,1071,1463,970,489,1145,1731,1129,826,1036,1438,1138,1381,1092,948,747,1054,310,1843,665,1183,918,568,1122,1237,1713,1349,675,976,1260,458,782,1042,1364,1386,1607,1191,1287,1588,924,1689,1191,1292,431,1045,1038,775,1060,915,1315,981,1422,1126,1704,657,1288,1151,797,1212,1102,990,1844,1557,143,680,1235,1128,988,952,680,865,934,1531,867,1226,583,1303,1036,1648,953,1271,749,1029,754,1228,1530,930,889,1037,1318,644,821,1927,327,637,1216,885,1347,967,919,378,1541,378,945,853,931,1152,1617,1818,806,1386,422,1187,563,927,1703,830,902,1298,1050,497,1431,633,1176,544,695,210,889,728,802,1286,1252,1396,586,1099,827,989,759,1404,807,542,1194,756,885,1242,666,991,1127,636,1270,567,878,1384,1022,1180,845,1520,1591,450,289,1621,842,705,1144,1061,1147,780,1355,813,965,1280,1019,807,989,1246,501,839,1187,942,1208,1018,992,576,978,625,932,1275,457,1034,687,2068,1009,1535,481,914,760,1165,996,915,215]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>id<\\/th>\\n      <th>treatment<\\/th>\\n      <th>true_ps<\\/th>\\n      <th>y_0<\\/th>\\n      <th>y_1<\\/th>\\n      <th>y_obs<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\nAbout 27.8% of units are treated. We display below the true propensity score distributions by treatment status:\n\n\n\nWe can finally see how the observed revenue is distributed across the two groups:\n\n\n\nAnd we can check whether the ATT and ATC were correctly simulated. The ATT is computed such as:\n\n\n# checking att\nmean(data$y_1[data$treatment==1]) - mean(data$y_0[data$treatment==1])\n\n\n[1] 100\n\nand the ATC:\n\n\n# checking atc\nmean(data$y_1[data$treatment==0]) - mean(data$y_0[data$treatment==0])\n\n\n[1] 50\n\nThe data have been simulated as we wanted.\nOutcome Regression Analysis\nWhat would happen if we analyze our simulated datasets with a simple outcome regression model? Would we recover the true answer?\nWe first create a regression function to run a simple regression model where we simply regress the observed income on the treatment indicator:\n\n\noutcome_regression <- function(data) {\n  data %>%\n    lm(\n      y_obs ~ treatment,\n      data = .\n    ) %>%\n    broom::tidy(., conf.int = TRUE) %>%\n    filter(term == \"treatment\") %>%\n    select(estimate, p.value, conf.low, conf.high)\n}\n\n\n\nWe then simulate 1000 datasets of 500 units and run the regression model:\n\n\n# first simulate simulation id\ndata_simulations <- tibble(sim_id = 1:1000) %>%\n# then simulate data\n  mutate(data = map(sim_id, ~ generate_data_matching(500))) %>%\n# finally run the reg analysis\n  mutate(results = map(data, ~ outcome_regression(.)))\n\n# unnest the results\ndata_simulations <- data_simulations %>%\n  select(-data) %>%\n  unnest(results)\n\n\n\nWe plot the distribution of estimates:\n\n\ndata_simulations %>%\n  ggplot(., aes(x = estimate)) +\n  geom_density(colour = NA) +\n  geom_vline(xintercept = mean(data_simulations$estimate)) +\n  geom_vline(xintercept = 100, colour = \"#EAA95C\") +\n  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  xlab(\"Revenue (in euros)\") + ylab(\"\") +\n  labs(fill = 'Status:') +\n  theme(panel.grid.major.y = element_blank(),\n        axis.text.y = element_blank())\n\n\n\n\nThe average of estimates is equal to 501.\nMatching Procedure\nWe now implement a simple matching where:\nWe implement below a propensity score matching procedure where:\neach treated is matched to its most similar control unit. This is a 1:1 nearest neighbor matching without replacement.\nthe distance metric used for the matching is the propensity score.\nTo see how the bias, statistical power and type M error evolve, we vary the matching distance (the caliper), which is expressed in standard deviation of the propensity score distribution.\nProposensity Score Function\nWe display the below the code for the function ps_function() which runs the matching procedure. It takes to inputs: (i) a dataset and (ii) the value of the caliper.\n\n\n# propensity score analysis function\nps_function <- function(data, caliper_value) {\n  matching_results <- matchit(\n    treatment ~ id,\n    distance = data$true_ps,\n    caliper = caliper_value,\n    data = data\n  )\n  \n  data_matched <- match.data(matching_results)\n  \n  proportion_matched <- sum(data_matched$treatment)/sum(data$treatment)*100\n  \n  true_effect <-\n    mean(data_matched$y_1[data_matched$treatment == 1]) - mean(data_matched$y_0[data_matched$treatment == 1])\n  \n  model_fit <- lm(\n    y_obs ~ treatment,\n    data = data_matched,\n    weights = weights\n  )\n  \n  ps_att <- broom::tidy(coeftest(model_fit, vcov. = vcovCL, cluster = ~ subclass),\n                        conf.int = TRUE) %>%\n    filter(term == \"treatment\") %>%\n    select(term, estimate, p.value, conf.low, conf.high)\n  \n  return(bind_cols(ps_att, proportion_matched = proportion_matched, true_effect = true_effect))\n}\n\n\n\nWe run the function on the data we previously created:\n\n\n# testing the function\nps_function(data, caliper = 0.5)\n\n\n# A tibble: 1 x 7\n  term      estimate     p.value conf.low conf.high proportion_matched\n  <chr>        <dbl>       <dbl>    <dbl>     <dbl>              <dbl>\n1 treatment     152. 0.000000599     93.8      210.               71.9\n# â¦ with 1 more variable: true_effect <dbl>\n\nThe function returns the estimate for the ATT, the associated \\(p\\)-value and 95% confidence interval, the portion of matched treated unit and the true value of the ATT.\nSimulations\nWe implement Monte-Carlo simulatiuons for a sample size of 300 units and differents values of the caliper:\n\n\ndata_simulations <- tibble(sim_id = 1:300) %>%\n  # then simulate data\n  mutate(data = map(sim_id, ~ generate_data_matching(300))) %>%\n  # generate caliper\n  crossing(caliper = c(seq(from = 1, to = 100, by = 1)/100)) %>%\n  # finally run the matching analysis\n  mutate(results = map2(data, caliper, ~ ps_function(.x, .y)))\n\n# unnest results\nsimulations_matching <- data_simulations %>% \n  select(-data) %>%\n  unnest(results)\n\n# saveRDS(simulations_matching, here(\"Outputs/simulations_matching.RDS\"))\n\n\n\nOnce the simulations have been run, we compute the summary statistics using the summarise_simulations() function:\n\n\nsimulations_matching <- readRDS(here(\"Outputs/simulations_matching.RDS\"))\n\nsummarise_simulations <- function(data) {\n  data %>%\n    mutate(significant = (p.value <= 0.05)) %>% \n    group_by(caliper) %>%\n    summarise(\n      proportion_matched = mean(proportion_matched),\n      power = mean(significant, na.rm = TRUE)*100, \n      bias_sign = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup()\n} \n\n\n\nWe apply the function to data_simulations:\n\n\nsummary_simulations_matching <- summarise_simulations(simulations_matching)\n\n\n\nAnd plot the results:\n\n\n\n\n\n\n",
      "last_modified": "2021-12-07T17:39:24-05:00"
    },
    {
      "path": "RDD.html",
      "title": "Simulations RDD",
      "description": "In this document, we run a simulation exercise to illustrate the existence of a trade-off between Omitted Variable Bias (OVB) and type M error in the context of a Regression Discontinuity Design (RDD).",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "LÃ©o Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSummary and intuition\nAn illustrative exampleModelisation choices\nData generation\nDefining the bandwidth\nEstimation\nOne simulation\nAll simulations\n\nAnalysis of the resultsQuick exploration\nComputing bias and type M\nGraph\n\n\n\nbody {\ntext-align: justify}\nSummary and intuition\nIn the case of the RDD, the OVB/type M trade-off is mediated by the size of the bandwidth considered in the analysis. The underlying idea is that the smaller the bandwidth, the more comparable units are and therefore the smaller the risk of OVB is. Yet, with a smaller bandwidth, sample size and thus power decrease, increasing type M error.\nAn illustrative example\nTo illustrate this trade-off between OVB and type M error, we consider a standard application of the RD design in economics of education where an grant or additional lessons are assigned based on the score obtained by students on a standardized test. Students with test scores below a given threshold receive the treatment while those above do not. Yet, students far above and far below the threshold may differ along unobserved characteristics such as ability. To limit this bias, the effect of the treatment is estimated by comparing the outcomes of students just below and just above this threshold. This enable to limit disparities in terms of unobserved characteristics.\nThistlewaite and Campbell (1960) introduced the concept of RDD using this type of quasi-experiment. In their paper, they take advantage of a sharp discontinuity in the assignment of an award (a Certificate of Merit) based on qualifying scores at a test. This type of analysis is still used today and many papers leveraging similar methodologies have been published since this seminal work. For instance, Jacob and Lefgren (2004) exploit this type of discontinuity to study the impact of summer school and grade retention programs on test scores. Students who score below a given score are required to attend a summer school and to retake the test. Students who do not pass the second have to repeat the grade.\nModelisation choices\nIn the present analysis, we build our simulations to replicate a similar type of quasi-experiment. In our fictional example, all students scoring below a cutoff \\(C\\) in a qualification test are required to take additional lessons. We want to estimate the effect of these additional lessons on scores on a final test taken by all students a year later.\nWe assume that the final score of student \\(i\\), \\(Final_i\\), is correlated with their qualification score \\(Qual_i\\) and their treatment status \\(T_i\\), ie whether student \\(i\\) received additional lessons or not. We further assume that both qualification and final test scores are affected by studentsâ unobserved ability \\(U_i\\) in a non linear way.\nThe DGP can be represented using the following Directed Acyclic Graph (DAG):\n\n\n\nFinal test scores are thus defined as follows:\n\\[Final_{i} = \\alpha + \\beta T_i + \\gamma Qual_{i} +  \\delta f(U_i) + \\epsilon_{i}\\] Where \\(\\alpha\\) is a constant, \\(f\\) a non linear function and \\(e \\sim \\mathcal{N}(0, \\sigma_{e})\\) noise. The parameter of interest is \\(\\beta\\). Translating this into a potential outcomes framework, we have \\(Final_i(0) = \\alpha + \\gamma Qual_{i} + \\delta f(U_i) + \\epsilon_{i}\\) and \\(Final_i(1) = \\alpha + \\gamma Qual_{i} + \\beta + \\delta f(U_i) + \\epsilon_{i}\\)\n\nTo simplify, we consider the following assumptions:\nFull compliance and a sharp treatment allocation such that \\(T_i = \\mathbb{I}[Qual_{i} < C]\\). All students with a qualification score below the threshold are treated and receive additional lessons. None of the students with a qualification score above the threshold are treated.\nThe unobserved ability affects qualification and final test scores in a cubic way. A large ability has a strong positive impact on test scores. Similarly a particularly low ability strongly impacts test scores negatively. An average ability does not have much impact on test scores. Such a functional form seems realistic. Note that ability creates an OVB only if it has a non linear impact on test scores.\nWe assume constant treatment effects. This assumption is not necessary and our results hold if we consider non-constant treatment effects. We thus may drop this assumption in the future.\nWe assume that the unobserved availability affects the qualification and final score in a similar way and therefore with the same intensity \\(\\delta\\).\nMore precisely, we set:\n\\(N\\) the number of students\n\\(U \\sim \\mathcal{N}(0, \\sigma_u^{2})\\) the unobserved ability.\n\\(Qual_i = H_i + \\delta U_i^{3}\\) where \\(H \\sim \\mathcal{N}(\\mu_h, \\sigma_h^{2})\\). We center the qualification scores such that treated units are below 0 and non treated ones above.\n\\(T_i = \\mathbb{I}[Qual_{i} < q_c]\\) where for now and for simplicity, \\(q_c\\) is a fixed grade threshold given as the quantile in the qualification score distribution.\n\\(e \\sim \\mathcal{N}(0, \\sigma_e^2)\\)\n\\(Final_{i} = \\alpha + \\beta T_i + \\gamma Qual_{i} + \\delta U_i^{3} + e_{i}\\)\nData generation\nWe write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\nOnce the fake data is generated, to make things more realistic we consider our data as if it was actual data. We do not take advantage of our knowledge of the data generating process in the estimation procedure. However, we observe both potential outcomes and the unobserved ability. Note that, in a real world setting, one would generally know the value of the threshold (and thus of \\(q_c\\)). Based on that and to simplify the computation of the bandwidth, we store \\(q_c\\).\n\n\ngenerate_data_rdd <- function(N, \n                              sigma_u,\n                              mu_h, \n                              sigma_h, \n                              sigma_e, \n                              alpha, \n                              beta,\n                              gamma,\n                              delta,\n                              q_c) {\n  \n  data <- tibble(id = 1:N) %>% \n    mutate(\n      # qual = rnorm(nrow(.), mu_h, sigma_h),\n      # u = rnorm(nrow(.), 0.5, sigma_u) + qual + 0.3*qual^3,\n      u = rnorm(nrow(.), 0, sigma_u),\n      qual = rnorm(nrow(.), mu_h, sigma_h) + delta*u^2,\n      e = rnorm(nrow(.), 0, sigma_e),\n      # qual_c = qual - quantile(qual, q_c),\n      # treated = qual_c < 0,\n      # threshold = quantile(qual, q_c),\n      treated = qual < quantile(qual, q_c),\n      final0 = alpha + gamma*qual + delta*u^2 + e,\n      final1 = final0 + beta,\n      final = final0 + beta*treated,\n      q_c = q_c\n    )\n  \n  return(data)\n}\n\n\n\nWe set baseline values for the parameters to emulate a somehow realistic observational study in this field. The set of parameters may produce test score outside of the range 0-100 in some iterations but that does not affect the analysis. We add the parameter value for delta separately as we will vary the value later and will reuse the vector baseline_parameters_RDD.\n\n\nbaseline_parameters_RDD <- tibble(\n  N = 1000,\n  sigma_u = 0.5,\n  mu_h = 75,\n  sigma_h = 7,\n  sigma_e = 4,\n  alpha = 20,\n  beta = 1,\n  gamma = 0.7,\n  q_c = 0.5\n)\n\n\n\nHere is an example of data created with our data generating process:\n\nid\nu\nqual\ne\ntreated\nfinal0\nfinal1\nfinal\nq_c\n1\n-0.4710797\n81.67502\n4.3412812\nFALSE\n81.73571\n82.73571\n81.73571\n0.5\n2\n-0.2719549\n77.31125\n0.5634812\nFALSE\n74.75532\n75.75532\n74.75532\n0.5\n3\n-0.1723552\n82.84076\n2.1446757\nFALSE\n80.16291\n81.16291\n80.16291\n0.5\n4\n0.6383354\n85.26925\n-0.3375149\nFALSE\n79.75843\n80.75843\n79.75843\n0.5\n5\n-0.7476674\n71.84628\n4.7880788\nTRUE\n75.63948\n76.63948\n76.63948\n0.5\n6\n0.6973408\n76.29749\n-1.2510138\nTRUE\n72.64351\n73.64351\n73.64351\n0.5\n7\n0.6995399\n72.70479\n-2.3984324\nTRUE\n68.98428\n69.98428\n69.98428\n0.5\n8\n-0.2445578\n75.68220\n1.0972801\nTRUE\n74.13463\n75.13463\n75.13463\n0.5\n9\n-0.1241070\n94.00694\n1.1704311\nFALSE\n86.99069\n87.99069\n86.99069\n0.5\n10\n-0.6943562\n59.45584\n1.3519690\nTRUE\n63.45319\n64.45319\n64.45319\n0.5\n\nDefining the bandwidth\nIn a RDD, the model is estimated only for observations close enough to the threshold, ie in a given bandwidth. We therefore create a function to define this bandwidth by adding a variable to the data set treated_bw that is equal to NA if the observations is outside of the bandwidth, TRUE if the observation falls in the bandwidth and the student is treated and FALSE if the observation falls in the bandwidth and the student is not treated. The bandwidth parameter bw represents the proportion of units that are in the bandwidth. If bw = 0.1, 10% of the students are in the bandwidth for instance.\n\n\ndefine_bw <- function (data, bw) {\n  data <- data %>% \n    mutate(\n      treated_bw = ifelse(\n        dplyr::between(\n          qual, \n          quantile(qual, unique(q_c) - bw/2), \n          quantile(qual, unique(q_c) + bw/2)\n        ), \n        treated, \n        NA\n      )\n    )\n} \n\n\n\nThe following graph illustrates this process by plotting final test scores against qualification ones depending on the value of treated_bw.\n\n\n\nEstimation\nAfter generating the data, we can run an estimation.\nNote that to run power calculations, we need to have access to the true effects. Therefore, before running the estimation, we write a short function to compute the average treatment effect on the treated (ATET). We will add this information to the estimation results.\n\n\ncompute_true_effect_rdd <- function(data) {\n  treated_data <- data %>% \n    filter(treated) \n  return(mean(treated_data$final1 - treated_data$final0))\n}  \n\n\n\nWe then run the estimation. To do so, we only consider observations within the bandwidth and regress the final test scores on the treatment, the qualification score and their interaction. Note that we include this interaction term to allow more flexibility and to mimic an realistic estimation. Yet, we know that this interaction term does not appear in the DGP. Including it or not do not change the results. Also note that, of course, we do not include the unobserved ability in this model to create an OVB.\n\n\nestimate_rdd <- function(data, bw) {\n  data_in_bw <- data %>% \n    define_bw(bw = bw) %>% \n    filter(!is.na(treated_bw))\n  \n  reg <- lm(\n    data = data_in_bw, \n    formula = final ~ treated + qual\n  ) %>% \n    broom::tidy() %>%\n    filter(term == \"treatedTRUE\") %>%\n    rename(p_value = p.value, se = std.error) %>%\n    select(estimate, p_value, se) %>%\n    mutate(\n      true_effect = compute_true_effect_rdd(data),\n      bw = bw\n    )\n  \n  return(reg)\n}\n\n\n\nOne simulation\nWe can now run a simulation, combining generate_data_rdd and estimate_rdd. To do so we create the function compute_sim_RDD. This simple function takes as input the various parameters along with a vector of bandwidth sizes, vect_bw. If we want to run several simulations with different bandwidths, we can reuse the same data, hence why we allow to passing a vector of bandwidths and not only one bandwidth. The function returns a table with the estimate of the treatment, its p-value and standard error, the true effect and the bandwidth and intensity of the OVB considered (delta). Note for now, that we do not store the values of the other parameters for simplicity because we consider them fixed over the study.\n\n\ncompute_sim_RDD <- function(N,\n                            sigma_u,\n                            mu_h,\n                            sigma_h,\n                            sigma_e,\n                            alpha,\n                            beta,\n                            gamma,\n                            delta,\n                            q_c,\n                            vect_bw) {\n  \n  data <- generate_data_rdd(\n    N = N,\n    sigma_u = sigma_u,\n    mu_h = mu_h,\n    sigma_h = sigma_h,\n    sigma_e = sigma_e,\n    alpha = alpha,\n    beta = beta,\n    gamma = gamma,\n    delta = delta,\n    q_c = q_c\n  ) \n  \n  map_dfr(vect_bw, estimate_rdd, data = data) %>%\n    mutate(delta = delta)\n} \n\n\n\nHere is an example of an output of this function.\n\n# A tibble: 2 x 6\n  estimate p_value    se true_effect    bw delta\n     <dbl>   <dbl> <dbl>       <dbl> <dbl> <dbl>\n1     5.21 0.00199  1.64           1   0.1     1\n2     3.07 0.0109   1.19           1   0.2     1\n\nAll simulations\nWe will run the simulations for different sets of parameters by mapping our compute_sim_RDD function on each set of parameters. We thus create a table with all the values of the parameters we want to test param_rdd. Note that in this table each set of parameters appears n_iter times as we want to run the analysis \\(n_{iter}\\) times for each set of parameters.\n\n\nsimple_parameters_RDD <- tibble(\n  N = 500,\n  sigma_u = 1,\n  mu_h = 0,\n  sigma_h = 1,\n  sigma_e = 0.5,\n  alpha = 1,\n  beta = 1,\n  gamma = 0.7,\n  q_c = 0.5\n)\n\nfixed_parameters_RDD <- simple_parameters_RDD #%>% rbind(...)\n# vect_bw <- seq(0.05, 0.4, 0.05)\nvect_bw <- c(seq(0.05, 0.4, 0.05), seq(0.4, 1, 0.1))\nvect_delta <- c(3)\nn_iter <- 1000\n\nparam_rdd <- fixed_parameters_RDD %>% \n  crossing(delta = vect_delta) %>% \n  mutate(vect_bw = list(vect_bw)) %>% \n  crossing(rep_id = 1:n_iter) %>% \n  select(-rep_id)\n\n\n\nWe then run the simulations by mapping our compute_sim_RDD function on param_rdd.\n\n\ntic()\nsimulations_rdd <- pmap_dfr(param_rdd, compute_sim_RDD)\nbeep()\ntoc()\n\n# saveRDS(simulations_rdd, here(\"Outputs/simulations_rdd.RDS\"))\n\n\n\nAnalysis of the results\nQuick exploration\nFirst, we quickly explore the results.\n\n\n\nComputing bias and type M\nWe want to compare \\(\\mathbb{E}[\\beta_0 - \\widehat{\\beta_{RDD}}]\\) and \\(\\mathbb{E}[|\\beta_0 - \\widehat{\\beta_{RDD}}||signif]\\). The first term represents the bias and the second term represents the type M error. This terms depend on the effect size. To enable comparison across simulation and getting terms independent of effect sizes, we also compute the average of the ratios between the estimate and the true effect, conditional on significance.\n\n\nsummarise_simulations <- function(data) {\n  data %>%\n    mutate(significant = (p_value <= 0.05)) %>% \n    group_by(delta, bw) %>%\n    summarise(\n      power = mean(significant, na.rm = TRUE)*100, \n      type_m = mean(ifelse(significant, abs(estimate - true_effect), NA), na.rm = TRUE),\n      bias_sign = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup()\n} \n\nsummary_simulations_rdd <- summarise_simulations(simulations_rdd)\n# saveRDS(summary_simulations_rdd, here(\"Outputs/summary_simulations_rdd.RDS\"))\n\n\n\nGraph\nTo analyze our results, we build a unique and simple graph:\n\n\n\n\n\n\n",
      "last_modified": "2021-12-07T17:39:36-05:00"
    }
  ],
  "collections": []
}
