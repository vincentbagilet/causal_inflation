{
  "articles": [
    {
      "path": "index.html",
      "title": "Overcoming the Omitted Variable Bias at the Cost of Type M Error",
      "author": [],
      "contents": "\n\n          \n      \n      An OVB-type M trade off\n      \n      \n      Home\n      \n      \n      Simulations\n       \n      ▾\n      \n      \n      RDD\n      IV\n      \n      \n      \n      \n      \n      ☰\n      \n      \n      \n        \n          \n            \n              \n            \n              Overcoming the Omitted Variable Bias at the Cost of Type M Error\n            \n            \n              \n                \n                    \n                      \n                         GitHub\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            Hi and welcome!\n            This website gathers code and additional material for the paper Overcoming the Omitted Variable Bias at the Cost of Type M Error by Vincent Bagilet and Léo Zabrocki.\n            The website is under construction and the analysis is still in a preliminary stage.\n          \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Overcoming the Omitted Variable Bias at the Cost of Type M Error\n            \n            \n              \n                \n                                    \n                    \n                       GitHub\n                    \n                  \n                                  \n              \n            \n            \n              Hi and welcome!\n              This website gathers code and additional material for the paper Overcoming the Omitted Variable Bias at the Cost of Type M Error by Vincent Bagilet and Léo Zabrocki.\n              The website is under construction and the analysis is still in a preliminary stage.\n            \n        \n      \n    \n\n    \n    \n    ",
      "last_modified": "2021-11-11T12:39:30-05:00"
    },
    {
      "path": "IV.html",
      "title": "Simulations OVB/type M trade-off: IV",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://www.sipa.columbia.edu/experience-sipa/sipa-profiles/vincent-bagilet"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nPurpose of the document\nAn illustrative exampleModelisation choices\nData generation\nEstimation\nOne simulation\nAll simulations\n\nAnalysis of the resultsQuick exploration\nComputing bias and type M\nGraph\n\n\n\nbody {\ntext-align: justify}\nPurpose of the document\nIn this document, we run a simulation exercise to illustrate the existence of a trade-off between Omitted Variable Bias (OVB) and type M error in the context of an Instrumental Variable (IV) strategy. This trade-off is mediated by\nAn illustrative example\nTo illustrate this trade-off between OVB and type M error, we consider a standard application of the IV design in environmental economics.\nModelisation choices\nIn the present analysis, we build our simulations to replicate a similar type of quasi-experiment.\nThe DGP can be represented using the following Directed Acyclic Graph (DAG):\n\n\n\nTo simplify, we consider the following assumptions:\nMore precisely, we set:\n\\(N\\) the number of observations\n\\(U \\sim \\mathcal{N}(0, \\sigma_u^{2})\\) the unobserved\nData generation\nWe write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\nNote that the parameter type_z describes whether z is a random sample from a normal or bernoulli distribution. It can take the values normal or bernoulli.\n\n\ngenerate_data_IV <- function(N,\n                             type_z, #\"normal\" or \"bernoulli\"\n                             param_z,\n                             sigma_u,\n                             sigma_ex,\n                             sigma_ey,\n                             alpha_y,\n                             alpha_x,\n                             treatment_effect,\n                             iv_strength,\n                             ovb_intensity\n                             ) {\n  \n  if (type_z == \"bernoulli\") {\n    z_gen <- rbernoulli(N, param_z)\n  } else if (type_z == \"normal\") {\n    z_gen <- rnorm(N, 0, param_z)\n  } else {\n    stop(\"type_z must be either 'bernoulli' or 'normal'\")\n  } \n  \n  data <- tibble(id = 1:N) %>% \n    mutate(\n      z = z_gen,\n      u = rnorm(nrow(.), 0, sigma_u),\n      e_x = rnorm(nrow(.), 0, sigma_ex),\n      e_y = rnorm(nrow(.), 0, sigma_ey),\n      x = alpha_x + iv_strength*z + ovb_intensity*u + e_x,\n      y = alpha_y + treatment_effect*x + ovb_intensity*u + e_y\n    )\n  \n  return(data)\n}\n\n\n\nEstimation\nAfter generating the data, we can run an estimation. We want to compare the IV and the OLS for different IV strength values. Hence, we need to estimate both an IV and an OLS and return both set of outcomes of interest.\n\n\nestimate_IV <- function(data) {\n  reg_IV <- ivreg(\n    data = data, \n    formula = y ~ x | z\n    ) %>% \n    broom::tidy() %>%\n    mutate(model = \"IV\")\n  \n  reg_OLS <- lm(\n    data = data, \n    formula = y ~ x\n    ) %>% \n    broom::tidy() %>%\n    mutate(model = \"OLS\")\n  \n  reg_OLS_unbiassed <- lm(\n    data = data, \n    formula = y ~ x + u\n    ) %>% \n    broom::tidy() %>%\n    mutate(model = \"OLS unbiassed\")\n  \n  reg <- reg_IV %>% \n    rbind(reg_OLS) %>% \n    rbind(reg_OLS_unbiassed) %>% \n    filter(term == \"x\") %>%\n    rename(p_value = p.value, se = std.error) %>%\n    select(estimate, p_value, se, model) %>% \n  \n  return(reg)\n}\n\n\n\nOne simulation\nWe can now run a simulation, combining generate_data_IV and estimate_IV. To do so we create the function compute_simulation_IV. This simple function takes as input the various parameters along with the bandwidth size, bw. It returns a table with the estimate of the treatment, its p-value and standard error, the true effect and the bandwidth and intensity of the OVB considered (ovb_intensity). Note for now, that we do not store the values of the other parameters for simplicity because we consider them fixed over the study.\n\n\ncompute_simulation_IV <- function(N,\n                                  type_z,\n                                  param_z,\n                                  sigma_u,\n                                  sigma_ex,\n                                  sigma_ey,\n                                  alpha_y,\n                                  alpha_x,\n                                  treatment_effect,\n                                  iv_strength,\n                                  ovb_intensity) {\n  generate_data_IV(\n    N = N,\n    type_z = type_z,\n    sigma_u = sigma_u,\n    param_z = param_z,\n    sigma_ex = sigma_ex,\n    sigma_ey = sigma_ey,\n    alpha_y = alpha_y,\n    alpha_x = alpha_x,\n    treatment_effect = treatment_effect,\n    iv_strength = iv_strength,\n    ovb_intensity = ovb_intensity\n  ) %>%\n    estimate_IV() %>%\n    mutate(\n      iv_strength = iv_strength,\n      ovb_intensity = ovb_intensity\n    )\n} \n\n\n\nAll simulations\nWe will run the simulations for different sets of parameters by mapping our compute_simulation_IV function on each set of parameters. We thus create a table with all the values of the parameters we want to test param_IV. Note that in this table each set of parameters appears n_iter times as we want to run the analysis \\(n_{iter}\\) times for each set of parameters.\n\n\nbaseline_parameters <- tibble(\n  N = 500,\n  type_z = \"normal\",\n  param_z = 1,\n  sigma_u = 1,\n  sigma_ex = 1,\n  sigma_ey = 1,\n  alpha_y = 0,\n  alpha_x = 0,\n  treatment_effect = 1\n)\n\nfixed_parameters <- baseline_parameters #%>% rbind(...)\nvect_iv_strength <- c(seq(0.05, 0.4, 0.05), seq(0.4, 0.6, 0.1))\n# vect_iv_strength <- c(0.1)\nvect_ovb_intensity <- c(0.4)\nn_iter <- 1000\n\nparam_IV <- fixed_parameters %>% \n  crossing(vect_iv_strength, vect_ovb_intensity) %>% \n  rename(iv_strength = vect_iv_strength, ovb_intensity = vect_ovb_intensity) %>% \n  crossing(rep_id = 1:n_iter) %>% \n  select(-rep_id)\n\n\n\nWe then run the simulations by mapping our compute_simulation_IV function on param_IV.\n\n\ntic()\nsimulations_IV <- pmap_dfr(param_IV, compute_simulation_IV)\nbeep()\ntoc()\n\n# saveRDS(simulations_IV, here(\"Outputs/simulations_IV.RDS\"))\n\n\n\nAnalysis of the results\nQuick exploration\nFirst, we quickly explore the results.\n\n\n\nWe notice that the OLS is always biased and that the IV is never biased. However, for limited IV strengths, the distribution of the estimates flattens. The smaller the IV strength, the most like it is to get an estimate away from the true value, even though the expected value remains equal to the true effect size. \nComputing bias and type M\nWe want to compare \\(\\mathbb{E}[\\beta_0 - \\widehat{\\beta_{i}}]\\) and \\(\\mathbb{E}[|\\beta_0 - \\widehat{\\beta_{RDD}}||signif]\\). The first term represents the bias and the second term represents the type M error. This terms depend on the effect size. To enable comparison across simulation and getting terms independent of effect sizes, we also compute the average of the ratios between the estimate and the true effect, conditional on significance.\n\n\nsummarise_simulations <- function(data, true_effect = 1) {\n  data %>%\n    mutate(significant = (p_value <= 0.05)) %>% \n    group_by(ovb_intensity, iv_strength, model) %>%\n    summarise(\n      power = mean(significant, na.rm = TRUE)*100, \n      type_m = mean(ifelse(significant, abs(estimate - true_effect), NA), na.rm = TRUE),\n      bias_signif = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      bias_all_median = median(estimate/true_effect, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup()\n} \n\nsummary_simulations_IV <- summarise_simulations(simulations_IV)\n# saveRDS(summary_simulations_IV, here(\"Outputs/summary_simulations_IV.RDS\"))\n\n\n\nGraph\nTo analyze our results, we build a unique and simple graph:\n\n\n\nOf course, if one considers all estimates, as the IV is unbiased, this issue does not arise. For now, we consider the median because for very low IV strength, we get very extreme values. We need to investigate this further.\n\n\n\n\n\n\n",
      "last_modified": "2021-11-11T12:39:39-05:00"
    },
    {
      "path": "RCT.html",
      "title": "OVB/type M trade-off: RCT",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://www.sipa.columbia.edu/experience-sipa/sipa-profiles/vincent-bagilet"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nPurpose of the document\nReplication of RCTs\n\n\nbody {\ntext-align: justify}\nPurpose of the document\nReplication of RCTs\nWe want to look at replications of RCTs in Development Economics. To do so, we use the list of replication papers put together by Sandip Sukhtankar. We may also end up looking at replications in experimental economics, using the paper by Camerer et al..\nWe gather the list of RCTs that have been replicated in Development Economics.\n\n\nrep_dvpt <- read_dta(here(\"Misc\", \"replication_data_final.dta\"))\n\nrep_dvpt %>% \n  filter((RCT == \"Yes\") & (Replicated == \"Replicated\")) %>% \n  .$ReplicationPaperTitle\n\n\n [1] \"Re-analysis of health and educational impacts of a school-based dewormking programme in western Kenya: a statistical replication of a cluster quasi-randomized stepped-wedge trial\"\n [2] \"Broken or Fixed Effects?\"                                                                                                                                                          \n [3] \"A Consistent Variance Estimator for 2SLS When Instruments Identify Different LATEs\"                                                                                                \n [4] \"Experimental Evidence on Returns to Capital and Access to Finance in Mexico\"                                                                                                       \n [5] \"Power to the people?: a replication study of a community-based monitoring programme in Uganda\"                                                                                     \n [6] \"Do Kenyan Teenagers Respond to HIV Risk Information? A Procedural Replication of Dupas (2011)\"                                                                                     \n [7] \" Heterogeneous treatment effects in the low track: Revisiting the Kenyan primary school experiment\"                                                                                \n [8] \"Discrimination in grading: experimental evidence from primary school teachers\"                                                                                                     \n [9] \"Certainty Preference, Random Choice, and Loss Aversion: A Comment on “Violence and Risk Preference: Experimental Evidence from Afghanistan”\"                                       \n[10] \"Understanding the Impact of Microcredit Expansions: A Bayesian Hierarchical Analysis of 7 Randomised Experiments\"                                                                  \n[11] \"Understanding the Impact of Microcredit Expansions: A Bayesian Hierarchical Analysis of 7 Randomised Experiments\"                                                                  \n[12] \"Understanding the Impact of Microcredit Expansions: A Bayesian Hierarchical Analysis of 7 Randomised Experiments\"                                                                  \n[13] \"Understanding the Impact of Microcredit Expansions: A Bayesian Hierarchical Analysis of 7 Randomised Experiments\"                                                                  \n[14] \"Understanding the Impact of Microcredit Expansions: A Bayesian Hierarchical Analysis of 7 Randomised Experiments\"                                                                  \n[15] \"Extending access to low-cost private schools through vouchers: an alternative interpretation of a two-stage ‘School Choice’ experiment in India\"                                   \nattr(,\"label\")\n[1] \"ReplicationPaperTitle\"\nattr(,\"format.stata\")\n[1] \"%179s\"\n\nNow look at table S1 in Camerer et al. We import it and work on it. Note that some pvalues are strictly smaller than 0.001. As we do not have more information, we set them to 0.001\nWe want to compute the power of the initial analysis if the true effect is in fact equal to the replication’s.\n\n\nrep_camerer <- read_excel(here(\"Misc\", \"rep_camerer.xlsx\"))\n\nretro_camerer <- rep_camerer %>% \n  mutate(\n    se_original = effect_original/qnorm(1 - pvalue_original), #incorrect\n    se_rep = effect_rep/qnorm(1 - pvalue_rep) #incorrect\n  ) %>% \n  select(A = effect_rep, s = se_original) %>% \n  # select(A, s) %>% \n  pmap_dfr(retrodesign) %>% \n  cbind(rep_camerer) %>% \n  as_tibble()\n\nretro_camerer %>%\n  ggplot() +\n  geom_histogram(aes(x = exaggeration))\n\n\n\n# \n# retro_camerer %>% \n#   ggplot() +\n#   geom_histogram(aes(x = power))\n# \n# retro_camerer %>% \n#   count(exaggeration > 1.5)\n\n1/median(retro_camerer$exaggeration)\n\n\n[1] 0.6197716\n\nmedian(retro_camerer$power)\n\n\n[1] 0.3787278\n\nAnalyzing just one study approximately at random\n\n\nrandom_study <- rep_camerer %>% \n  slice_sample(n = 1) %>%\n  mutate(\n    se_original = effect_original/qnorm(1 - pvalue_original), #incorrect\n    se_rep = effect_rep/qnorm(1 - pvalue_rep) #incorrect\n  ) \n\ndata_graph_distrib <- rnorm(random_study$effect_rep, random_study$se_original, n = 5000) %>% \n  as_tibble() %>% \n  mutate(\n    n = row_number(),\n    non_significant = dplyr::between(\n      value, \n      - 1.96*sd(value), \n      1.96*sd(value)\n    ),\n    significant = ifelse(non_significant, \"Non significant\", \"Significant\") \n  ) \n\ndata_graph_distrib %>% \n  ggplot(aes(x = n, y = value, color = significant)) + \n  # geom_point(alpha = 0) +\n  geom_point(alpha = 0.8) +\n  geom_hline(aes(yintercept = mean(value)), size = 0.8) +\n  geom_point(aes(x = 0, y = random_study$effect_original), color = \"darkred\", size = 2) +\n  geom_linerange(aes(\n    x = 0,\n    ymin = random_study$effect_original - 1.96*random_study$se_original,\n    ymax = random_study$effect_original + 1.96*random_study$se_original), color = \"darkred\") +\n  # geom_hline(aes(yintercept = 1.96*sd(value)), color = \"#FB9637\") +\n  # geom_hline(aes(yintercept = - 1.96*sd(value)), color = \"#FB9637\") +\n  labs(\n    title = \"Illustration of type M errors\",\n    subtitle = \"5000 draws of an estimate ~ N(Effect size in replication, std err in original study)\",\n    x = \"Draw\",\n    y = \"Point estimate\",\n    caption = \"The red dot represents the estimate found in the original study\"\n  ) +\n  scale_color_discrete(name = \"\") \n\n\n\n\n\n\n\n",
      "last_modified": "2021-11-15T14:33:14-05:00"
    },
    {
      "path": "RDD.html",
      "title": "Simulations OVB/type M trade-off: RDD",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://www.sipa.columbia.edu/experience-sipa/sipa-profiles/vincent-bagilet"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nPurpose of the document\nAn illustrative exampleModelisation choices\nData generation\nDefining the bandwidth\nEstimation\nOne simulation\nAll simulations\n\nAnalysis of the resultsQuick exploration\nComputing bias and type M\nGraph\n\n\n\nbody {\ntext-align: justify}\nPurpose of the document\nIn this document, we run a simulation exercise to illustrate the existence of a trade-off between Omitted Variable Bias (OVB) and type M error in the context of a Regression Discontinuity Design (RDD). This trade-off is mediated by the size of the bandwidth considered in the analysis. The underlying idea is that the smaller the bandwidth, the more comparable units are and therefore the smaller the risk of OVB is. Yet, with a smaller bandwidth, sample size and thus power decrease, increasing type M error.\nAn illustrative example\nTo illustrate this trade-off between OVB and type M error, we consider a standard application of the RD design in economics of education where an grant or additional lessons are assigned based on the score obtained by students on a standardized test. Students with test scores below a given threshold receive the treatment while those above do not. Yet, students far above and far below the threshold may differ along unobserved characteristics such as ability. To limit this bias, the effect of the treatment is estimated by comparing the outcomes of students just below and just above this threshold. This enable to limit disparities in terms of unobserved characteristics.\nThistlewaite and Campbell (1960) introduced the concept of RDD using this type of quasi-experiment. In their paper, they take advantage of a sharp discontinuity in the assignment of an award (a Certificate of Merit) based on qualifying scores at a test. This type of analysis is still used today and many papers leveraging similar methodologies have been published since this seminal work. For instance, Jacob and Lefgren (2004) exploit this type of discontinuity to study the impact of summer school and grade retention programs on test scores. Students who score below a given score are required to attend a summer school and to retake the test. Students who do not pass the second have to repeat the grade.\nModelisation choices\nIn the present analysis, we build our simulations to replicate a similar type of quasi-experiment. In our fictional example, all students scoring below a cutoff \\(C\\) in a qualification test are required to take additional lessons. We want to estimate the effect of these additional lessons on scores on a final test taken by all students a year later.\nWe assume that the final score of student \\(i\\), \\(Final_i\\), is correlated with their qualification score \\(Qual_i\\) and their treatment status \\(T_i\\), ie whether student \\(i\\) received additional lessons or not. We further assume that both qualification and final test scores are affected by students’ unobserved ability \\(U_i\\) in a non linear way.\nThe DGP can be represented using the following Directed Acyclic Graph (DAG):\n\n\n\nFinal test scores are thus defined as follows:\n\\[Final_{i} = \\alpha + \\beta T_i + \\gamma Qual_{i} +  \\delta f(U_i) + \\epsilon_{i}\\] Where \\(\\alpha\\) is a constant, \\(f\\) a non linear function and \\(e \\sim \\mathcal{N}(0, \\sigma_{e})\\) noise. The parameter of interest is \\(\\beta\\). Translating this into a potential outcomes framework, we have \\(Final_i(0) = \\alpha + \\gamma Qual_{i} + \\delta f(U_i) + \\epsilon_{i}\\) and \\(Final_i(1) = \\alpha + \\gamma Qual_{i} + \\beta + \\delta f(U_i) + \\epsilon_{i}\\)\n\nTo simplify, we consider the following assumptions:\nFull compliance and a sharp treatment allocation such that \\(T_i = \\mathbb{I}[Qual_{i} < C]\\). All students with a qualification score below the threshold are treated and receive additional lessons. None of the students with a qualification score above the threshold are treated.\nThe unobserved ability affects qualification and final test scores in a cubic way. A large ability has a strong positive impact on test scores. Similarly a particularly low ability strongly impacts test scores negatively. An average ability does not have much impact on test scores. Such a functional form seems realistic. Note that ability creates an OVB only if it has a non linear impact on test scores.\nWe assume constant treatment effects. This assumption is not necessary and our results hold if we consider non-constant treatment effects. We thus may drop this assumption in the future.\nWe assume that the unobserved availability affects the qualification and final score in a similar way and therefore with the same intensity \\(\\delta\\).\nMore precisely, we set:\n\\(N\\) the number of students\n\\(U \\sim \\mathcal{N}(0, \\sigma_u^{2})\\) the unobserved ability.\n\\(Qual_i = H_i + \\delta U_i^{3}\\) where \\(H \\sim \\mathcal{N}(\\mu_h, \\sigma_h^{2})\\). We center the qualification scores such that treated units are below 0 and non treated ones above.\n\\(T_i = \\mathbb{I}[Qual_{i} < q_c]\\) where for now and for simplicity, \\(q_c\\) is a fixed grade threshold given as the quantile in the qualification score distribution.\n\\(e \\sim \\mathcal{N}(0, \\sigma_e^2)\\)\n\\(Final_{i} = \\alpha + \\beta T_i + \\gamma Qual_{i} + \\delta U_i^{3} + e_{i}\\)\nData generation\nWe write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\nOnce the fake data is generated, to make things more realistic we consider our data as if it was actual data. We do not take advantage of our knowledge of the data generating process in the estimation procedure. However, we observe both potential outcomes and the unobserved ability. Note that, in a real world setting, one would generally know the value of the threshold (and thus of \\(q_c\\)). Based on that and to simplify the computation of the bandwidth, we store \\(q_c\\).\n\n\ngenerate_data_rdd <- function(N, \n                              sigma_u,\n                              mu_h, \n                              sigma_h, \n                              sigma_e, \n                              alpha, \n                              beta,\n                              gamma,\n                              delta,\n                              q_c) {\n  \n  data <- tibble(id = 1:N) %>% \n    mutate(\n      # qual = rnorm(nrow(.), mu_h, sigma_h),\n      # u = rnorm(nrow(.), 0.5, sigma_u) + qual + 0.3*qual^3,\n      u = rnorm(nrow(.), 0, sigma_u),\n      qual = rnorm(nrow(.), mu_h, sigma_h) + delta*u^2,\n      e = rnorm(nrow(.), 0, sigma_e),\n      # qual_c = qual - quantile(qual, q_c),\n      # treated = qual_c < 0,\n      # threshold = quantile(qual, q_c),\n      treated = qual < quantile(qual, q_c),\n      final0 = alpha + gamma*qual + delta*u^2 + e,\n      final1 = final0 + beta,\n      final = final0 + beta*treated,\n      q_c = q_c\n    )\n  \n  return(data)\n}\n\n\n\nWe set baseline values for the parameters to emulate a somehow realistic observational study in this field. The set of parameters may produce test score outside of the range 0-100 in some iterations but that does not affect the analysis. We add the parameter value for delta separately as we will vary the value later and will reuse the vector baseline_parameters_RDD.\n\n\nbaseline_parameters_RDD <- tibble(\n  N = 1000,\n  sigma_u = 0.5,\n  mu_h = 75,\n  sigma_h = 7,\n  sigma_e = 4,\n  alpha = 20,\n  beta = 1,\n  gamma = 0.7,\n  q_c = 0.5\n)\n\n\n\nHere is an example of data created with our data generating process:\n\nid\nu\nqual\ne\ntreated\nfinal0\nfinal1\nfinal\nq_c\n1\n0.1717013\n67.52429\n-2.8828913\nTRUE\n64.41359\n65.41359\n65.41359\n0.5\n2\n-0.3919737\n63.62737\n-7.8289577\nTRUE\n56.86384\n57.86384\n57.86384\n0.5\n3\n-0.1561371\n86.04847\n-0.3684975\nFALSE\n79.88981\n80.88981\n79.88981\n0.5\n4\n-0.1694764\n81.37405\n0.6085788\nFALSE\n77.59914\n78.59914\n77.59914\n0.5\n5\n0.4107875\n74.49218\n4.0452923\nFALSE\n76.35857\n77.35857\n76.35857\n0.5\n6\n-0.2905197\n82.07200\n-0.4015767\nFALSE\n77.13322\n78.13322\n77.13322\n0.5\n7\n0.1804958\n72.64830\n-4.8115996\nTRUE\n66.07479\n67.07479\n67.07479\n0.5\n8\n-1.4435684\n73.49395\n-0.4845171\nTRUE\n73.04514\n74.04514\n74.04514\n0.5\n9\n1.0230690\n78.60310\n-0.0830528\nFALSE\n75.98579\n76.98579\n75.98579\n0.5\n10\n0.0520413\n63.31278\n-4.6021684\nTRUE\n59.71949\n60.71949\n60.71949\n0.5\n\nDefining the bandwidth\nIn a RDD, the model is estimated only for observations close enough to the threshold, ie in a given bandwidth. We therefore create a function to define this bandwidth by adding a variable to the data set treated_bw that is equal to NA if the observations is outside of the bandwidth, TRUE if the observation falls in the bandwidth and the student is treated and FALSE if the observation falls in the bandwidth and the student is not treated. The bandwidth parameter bw represents the proportion of units that are in the bandwidth. If bw = 0.1, 10% of the students are in the bandwidth for instance.\n\n\ndefine_bw <- function (data, bw) {\n  data <- data %>% \n    mutate(\n      treated_bw = ifelse(\n        dplyr::between(\n          qual, \n          quantile(qual, unique(q_c) - bw/2), \n          quantile(qual, unique(q_c) + bw/2)\n        ), \n        treated, \n        NA\n      )\n    )\n} \n\n\n\nThe following graph illustrates this process by plotting final test scores against qualification ones depending on the value of treated_bw.\n\n\n\nEstimation\nAfter generating the data, we can run an estimation.\nNote that to run power calculations, we need to have access to the true effects. Therefore, before running the estimation, we write a short function to compute the average treatment effect on the treated (ATET). We will add this information to the estimation results.\n\n\ncompute_true_effect_rdd <- function(data) {\n  treated_data <- data %>% \n    filter(treated) \n  return(mean(treated_data$final1 - treated_data$final0))\n}  \n\n\n\nWe then run the estimation. To do so, we only consider observations within the bandwidth and regress the final test scores on the treatment, the qualification score and their interaction. Note that we include this interaction term to allow more flexibility and to mimic an realistic estimation. Yet, we know that this interaction term does not appear in the DGP. Including it or not do not change the results. Also note that, of course, we do not include the unobserved ability in this model to create an OVB.\n\n\nestimate_rdd <- function(data, bw) {\n  data_in_bw <- data %>% \n    define_bw(bw = bw) %>% \n    filter(!is.na(treated_bw))\n  \n  reg <- lm(\n    data = data_in_bw, \n    formula = final ~ treated + qual\n  ) %>% \n  broom::tidy() %>%\n  filter(term == \"treatedTRUE\") %>%\n  rename(p_value = p.value, se = std.error) %>%\n  select(estimate, p_value, se) %>%\n  mutate(true_effect = compute_true_effect_rdd(data))\n  \n  return(reg)\n}\n\n\n\nOne simulation\nWe can now run a simulation, combining generate_data_rdd and estimate_rdd. To do so we create the function compute_simulation_rdd. This simple function takes as input the various parameters along with the bandwidth size, bw. It returns a table with the estimate of the treatment, its p-value and standard error, the true effect and the bandwidth and intensity of the OVB considered (delta). Note for now, that we do not store the values of the other parameters for simplicity because we consider them fixed over the study.\n\n\ncompute_simulation_rdd <- function(N,\n                                   sigma_u,\n                                   mu_h,\n                                   sigma_h,\n                                   sigma_e,\n                                   alpha,\n                                   beta,\n                                   gamma,\n                                   delta,\n                                   q_c,\n                                   bw) {\n  generate_data_rdd(\n    N = N,\n    sigma_u = sigma_u,\n    mu_h = mu_h,\n    sigma_h = sigma_h,\n    sigma_e = sigma_e,\n    alpha = alpha,\n    beta = beta,\n    gamma = gamma,\n    delta = delta,\n    q_c = q_c\n  ) %>%\n    estimate_rdd(bw = bw) %>%\n    mutate(bw = bw,\n           delta = delta)\n} \n\n\n\nHere is an example of an output of this function.\n\n# A tibble: 1 x 6\n  estimate p_value    se true_effect    bw delta\n     <dbl>   <dbl> <dbl>       <dbl> <dbl> <dbl>\n1     1.38   0.389  1.60           1   0.1     1\n\nAll simulations\nWe will run the simulations for different sets of parameters by mapping our compute_simulation_rdd function on each set of parameters. We thus create a table with all the values of the parameters we want to test param_rdd. Note that in this table each set of parameters appears n_iter times as we want to run the analysis \\(n_{iter}\\) times for each set of parameters.\n\n\nsimple_parameters_RDD <- tibble(\n  N = 500,\n  sigma_u = 1,\n  mu_h = 0,\n  sigma_h = 1,\n  sigma_e = 0.5,\n  alpha = 1,\n  beta = 1,\n  gamma = 0.7,\n  q_c = 0.5\n)\n\nfixed_parameters_RDD <- simple_parameters_RDD #%>% rbind(...)\n# vect_bw <- seq(0.05, 0.4, 0.05)\nvect_bw <- c(seq(0.05, 0.4, 0.05), seq(0.4, 1, 0.1))\nvect_delta <- c(3)\nn_iter <- 1000\n\nparam_rdd <- fixed_parameters_RDD %>% \n  crossing(vect_bw, vect_delta) %>% \n  rename(bw = vect_bw, delta = vect_delta) %>% \n  crossing(rep_id = 1:n_iter) %>% \n  select(-rep_id)\n\n\n\nWe then run the simulations by mapping our compute_simulation_rdd function on param_rdd.\n\n\ntic()\nsimulations_rdd <- pmap_dfr(param_rdd, compute_simulation_rdd)\nbeep()\ntoc()\n\n# saveRDS(simulations_rdd, here(\"Outputs/simulations_rdd.RDS\"))\n\n\n\nAnalysis of the results\nQuick exploration\nFirst, we quickly explore the results.\n\n\n\nComputing bias and type M\nWe want to compare \\(\\mathbb{E}[\\beta_0 - \\widehat{\\beta_{RDD}}]\\) and \\(\\mathbb{E}[|\\beta_0 - \\widehat{\\beta_{RDD}}||signif]\\). The first term represents the bias and the second term represents the type M error. This terms depend on the effect size. To enable comparison across simulation and getting terms independent of effect sizes, we also compute the average of the ratios between the estimate and the true effect, conditional on significance.\n\n\nsummarise_simulations <- function(data) {\n  data %>%\n    mutate(significant = (p_value <= 0.05)) %>% \n    group_by(delta, bw) %>%\n    summarise(\n      power = mean(significant, na.rm = TRUE)*100, \n      type_m = mean(ifelse(significant, abs(estimate - true_effect), NA), na.rm = TRUE),\n      bias_sign = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup()\n} \n\nsummary_simulations_rdd <- summarise_simulations(simulations_rdd)\n# saveRDS(summary_simulations_rdd, here(\"Outputs/summary_simulations_rdd.RDS\"))\n\n\n\nGraph\nTo analyze our results, we build a unique and simple graph:\n\n\n\n\n\n\n",
      "last_modified": "2021-11-11T12:39:45-05:00"
    }
  ],
  "collections": []
}
