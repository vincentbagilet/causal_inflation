{
  "articles": [
    {
      "path": "addressing_issues.html",
      "title": "Addressing the power issue",
      "description": "Under construction. In this document, we discuss and illustrate how to run power calculations.",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nPost estimation analysisRetrodesign\n\n\n\nbody {\ntext-align: justify}\nPost estimation analysis\nRetrodesign\n\n\nse <- 0.2\n\nretro <- retro_design(as.list(seq(0.05, 0.4, by = 0.01)), se) %>%\n  unnest(cols = c(effect_size, power, type_s, type_m)) %>%\n  select(-type_s) %>% \n  mutate(power = power * 100) %>%\n  rename(\n    \"Statistical Power (%)\" = power,\n    \"Type-M Error (Exaggeration Ratio)\" = type_m\n  ) %>%\n  pivot_longer(\n    cols = -c(effect_size),\n    names_to = \"statistic\",\n    values_to = \"value\"\n  )\n\n\n\n\n\nretro %>% \n  ggplot(aes(x = effect_size, y  = value)) +\n  geom_line(size = 1.1) +\n  facet_wrap( ~ statistic, scales = \"free\") +\n  # geom_vline(aes(xintercept = 0.4)) +\n  geom_vline(aes(xintercept = 0.22)) +\n  scale_y_continuous(breaks = scales::pretty_breaks(n = 7)) +\n  labs(\n    title = \"Evolution of power and type-M error with true effect size\",\n    x =\"Hypothetical True Effect Size\",\n    y = \"\",\n    caption = paste(\"Standard error =\", se)\n  )\n\n\n\n\n\n\n\n",
      "last_modified": "2022-03-01T23:19:12-05:00"
    },
    {
      "path": "crosscutting-issues.html",
      "title": "Simulations for crosscutting issues",
      "description": "In this document, we run a simulation exercise to illustrate crosscutting type M issues arising in causal and non-causal identification studies.",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSummary and intuition\nAn illustrative exampleModeling choices\nData generation\nEstimation\nOne simulation\nAll simulations\n\nAnalysis of the results (proportion treated units)Quick exploration\nComputing bias and type M\nTHE graph\n\nVarying the number of clusters\n\n\nbody {\ntext-align: justify}\n\n\n\nSummary and intuition\nPower and thus type M error can also be affected by aspects that are not proper to one particular identification strategy. In this document we investigate the impact of different factors:\nThe proportion of unit treated (at number of observations constant). We all know that power is maximized when the proportion of units treated is 0.5. The further away we are from this value, the smaller the power and the larger the exaggeration ratio. (I am not certain, I need to check the formula but) The intuition is that a limited number of treated, or control, limits the variation used to estimate the effect.\nLimiting the variation in y (small number of counts in y)\nThe number of clusters. Considering a small number of clusters is to some extent comparable to considering a small number of units and thus partly acts as limiting the number of observations, thus decreasing power and increasing the exaggeration ratio.\nAn illustrative example\nFor readability and to illustrate this loss in power, we consider an example setting. For this illustration we could consider a large variety of distribution parameter for the variables. We narrow this down to an example setting, considering an analysis of the impact of voter turnout on election results, instrumenting voter turnout with rainfall on the day of the election. Our point should stand in more general settings and the choice of values is mostly for illustration.\nModeling choices\nFor simplicity, we consider several assumptions. These assumptions is not representative of the existing literature but the objective is only to calibrate our simulation with somehow realistic parameter values. Again, this illustration is very simplistic. The high level assumptions are:\nFor now, we consider only standard normal distributions\nThe DGP can be represented using the following Directed Acyclic Graph (DAG):\n\n\n\nWe thus assume that the outcome \\(y\\) for individual \\(i\\) is defined as follows:\n\\[y_{i} = \\alpha + \\beta T_{i} + \\delta u_{i} + \\epsilon_{i}\\]\nWhere \\(\\alpha\\) is a constant, \\(T_{i}\\) a dummy equal to 1 if individual \\(i\\) is treated and if they are not treated, \\(\\beta\\) the treatment effect size, \\(u\\) an unobserved variable, \\(\\delta\\) the intensity of the OVB and \\(\\epsilon\\) an error term.\nMore precisely, we set:\n\\(N\\) the number of observations \n\\(T_i = \\mathbb{1}\\{i\\text{ is treated}\\}\\) the treatment dummy. \\(p_T\\) represents the proportion of treated units.\n\\(u \\sim \\mathcal{N}(0, \\sigma_{u}^{2})\\) the unobserved variable\n\\(\\epsilon \\sim \\mathcal{N}(0, \\sigma_{\\epsilon}^{2})\\) the error term\nData generation\nWe write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\nNote that, for readability, in this document, we only display the chunks of code that may be important to understand the assumptions behind our simulations and the way we built our simulation. We do not display all the arguably “technical” code, in particular the one used to generate tables and graphs. All this code is however openly available on the GitHub of the project.\n\n\ngenerate_data_crosscutting <- function(N,\n                                   p_treat,\n                                   sigma_u,\n                                   sigma_e,\n                                   alpha,\n                                   treatment_effect, #beta\n                                   ovb_intensity #delta\n                                   ) {\n  tibble(id = 1:N) %>%\n    mutate(\n      # treated = rbernoulli(N, p_treat),\n      treated = (id %in% sample(1:N, p_treat*N)),\n      u = rnorm(nrow(.), 0, sigma_u),\n      e = rnorm(nrow(.), 0, sigma_e),\n      y = alpha + treatment_effect*treated + ovb_intensity*u + e\n    )\n}\n\n\n\n\nFor now, we consider very simple baseline parameters, mostly standard normal distributions:\n\nN\np_treat\nsigma_u\nsigma_e\nalpha\ntreatment_effect\novb_intensity\n500\n0.5\n1\n1\n1\n0.4\n1\n\nHere is an example of data created with our data generating process:\n\nid\ntreated\nu\ne\ny\n1\nFALSE\n-1.0169370\n1.0287529\n1.0118159\n2\nFALSE\n0.4582410\n-1.9456761\n-0.4874351\n3\nTRUE\n-1.0664380\n0.5777433\n0.9113053\n4\nFALSE\n0.0442269\n2.3445169\n3.3887439\n5\nTRUE\n1.5760275\n0.3721185\n3.3481461\n6\nTRUE\n-1.3731183\n0.9700017\n0.9968834\n7\nFALSE\n-0.5521575\n-2.3440583\n-1.8962158\n8\nTRUE\n1.5459231\n-0.8626387\n2.0832844\n9\nFALSE\n1.0625916\n-1.8442455\n0.2183461\n10\nTRUE\n-1.4568095\n-0.6610086\n-0.7178181\n\nEstimation\nAfter generating the data, we can run an estimation. We want to be able to run the estimation for different numbers of clusters. We create artificial clusters, based on the individual identification numbers id. When we do not wish to cluster the standard errors, we simply set the cluster variable to be equal to the id so that the “clustering” is at the individual level. Note that we use the function lm_robust from the estimatr package to compute this clustering.\n\n\nestimate_crosscutting <- function(data, n_clusters = NA) {\n  n_clusters_mod <- ifelse(is.na(n_clusters), nrow(data), n_clusters)\n  \n  data %>%\n    mutate(cluster = cut_number(id, n_clusters_mod, labels = FALSE)) %>%\n    lm(data = ., formula = y ~ treated) %>%\n    coeftest(vcov = vcovCL, cluster = ~cluster) %>% \n    broom::tidy() %>%\n    filter(term == \"treatedTRUE\") %>%\n    rename(p_value = p.value, se = std.error) %>%\n    select(estimate, p_value, se) %>%\n    mutate(n_clusters = n_clusters)\n}\n\n# estimate_crosscutting_1 <- function(data, n_clusters = NA) {\n#   n_clusters_mod <- ifelse(is.na(n_clusters), nrow(data), n_clusters)\n#   \n#   data %>%\n#     mutate(cluster = cut_number(id, n_clusters_mod, labels = FALSE)) %>%\n#     estimatr::lm_robust(\n#       data = .,\n#       formula = y ~ treated,\n#       clusters = cluster\n#     ) %>%\n#     broom::tidy() %>%\n#     as_tibble() %>% \n#     filter(term == \"treatedTRUE\") %>%\n#     rename(p_value = p.value, se = std.error) %>%\n#     select(estimate, p_value, se) %>%\n#     mutate(n_clusters = n_clusters)\n# }\n\n# estimate_crosscutting_2 <- function(data, n_clusters = NA) {\n# \n#   if (is.na(n_clusters)) {\n#     reg <- lm(\n#       data = data,\n#       formula = y ~ treated\n#     )\n#   } else {\n#     reg <- data %>%\n#       mutate(cluster = cut_number(id, n_clusters, labels = FALSE)) %>%\n#       estimatr::lm_robust(\n#         data = .,\n#         formula = y ~ treated,\n#         clusters = cluster\n#       )\n#   }\n# \n#   reg %>%\n#     broom::tidy() %>%\n#     as_tibble() %>% \n#     filter(term == \"treatedTRUE\") %>%\n#     rename(p_value = p.value, se = std.error) %>%\n#     select(estimate, p_value, se) %>%\n#     mutate(n_clusters = n_clusters)\n# }\n\n\n\nOne simulation\nWe can now run a simulation, combining generate_data_crosscutting and estimate_crosscutting. To do so we create the function compute_sim_crosscutting. This simple function takes as input the various parameters. It returns a table with the estimate of the treatment, its p-value and standard error, the true effect. Note for now, that we do not store the values of the other parameters for simplicity because we consider them fixed over the study.\n\n\ncompute_sim_crosscutting <- function(N,\n                                 p_treat,\n                                 sigma_u,\n                                 sigma_e,\n                                 alpha,\n                                 treatment_effect,\n                                 ovb_intensity,\n                                 n_clusters = NA) {\n  generate_data_crosscutting(\n    N = N,\n    p_treat = p_treat,\n    sigma_u = sigma_u,\n    sigma_e = sigma_e,\n    alpha = alpha,\n    treatment_effect = treatment_effect,\n    ovb_intensity = ovb_intensity\n  ) %>%\n  estimate_crosscutting(n_clusters = n_clusters) %>%\n  mutate(\n    true_effect = treatment_effect,\n    p_treat = p_treat\n  ) \n}\n\n\n\nAll simulations\nWe will run the simulations for different sets of parameters by mapping our compute_sim_p_treat function on each set of parameters. We thus create a table with all the values of the parameters we want to test, param_p_treat. First, we only vary the proportion of unit treated. We will vary the number of clusters in a second analysis.\nNote that in this table each set of parameters appears n_iter times as we want to run the analysis \\(n_{iter}\\) times for each set of parameters.\n\n\n\nWe then run the simulations by mapping our compute_sim_p_treat function on param_p_treat.\n\n\n\nAnalysis of the results (proportion treated units)\nQuick exploration\nFirst, we quickly explore the results.\n\n\n\nComputing bias and type M\nWe want to compare \\(\\mathbb{E}[\\beta_0 - \\widehat{\\beta}]\\) and \\(\\mathbb{E}[|\\beta_0 - \\widehat{\\beta}||signif]\\). The first term represents the bias and the second term represents the type M error. This terms depend on the effect size. To enable comparison across simulation and getting terms independent of effect sizes, we also compute the average of the ratios between the estimate and the true effect, conditional on significance.\n\n\nsummarise_sim_crosscutting <- function(data) {\n  data %>%\n    mutate(significant = (p_value <= 0.05)) %>%\n    group_by(p_treat, n_clusters) %>%\n    summarise(\n      power = mean(significant, na.rm = TRUE)*100,\n      type_m = mean(ifelse(significant, abs(estimate/true_effect), NA), na.rm = TRUE),\n      bias_signif = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      bias_all_median = median(estimate/true_effect, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>%\n    ungroup()\n}\n\nsummary_sim_p_treat <- summarise_sim_crosscutting(sim_p_treat)\n\n\n\nTHE graph\nTo analyze our results, we build a unique and simple graph:\n\n\n\nVarying the number of clusters\nWe then reproduce a similar type of analysis and graph but varying the number of clusters.\n\n2.912 sec elapsed\n\n\n\n\n\n",
      "last_modified": "2022-03-01T23:19:53-05:00"
    },
    {
      "path": "DID.html",
      "title": "Simulations DID / Event study",
      "description": "In this document, we run a simulation exercise to illustrate how using a Difference-in-Differences (DiD) or event study approach to avoid confounders may lead to a loss in power and inflated effect sizes.",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSummary and intuition\nAn illustrative exampleModeling choices\nData generation\nEstimation\nOne simulation\nAll simulations\n\nAnalysis of the resultsQuick exploration\nComputing bias and exaaggeration ratio\nMain graph\n\n\n\nbody {\ntext-align: justify}\nSummary and intuition\nIn the case of event studies, DiD or basically any study using discrete exogenous shocks, the unconfoundedness / exaggeration trade-off is mediated by the number of observations treated. In some classic DiD settings, while the number of observations is large, the number of events might be limited. Pinpointing exogenous shocks is never easy and we are sometimes only able to find a limited number of occurrences of this shock or shocks affecting a small portion of the population. More precisely, the number of observations with a non null treatment status might be small. In this instance, the variation available to identify the treatment is limited, possibly leading power to be low and exaggeration issues to arise.\nThe number of treated observations can be decomposed into two parts: the total number of observations times the proportion of observations in the treated group. Of course, if one reduces the total sample size, precision and thus power will decrease. Now, we all remember that power is maximized when the proportion of treated observations is equal to the proportion of untreated ones. If we consider a fixed number of observations, decreasing the proportion of treated observations below 0.5 will decrease precision and power.\nThe simple formula of the standard error of the difference of the averages of the outcome variable in the treated and control group illustrates this. Of course this does not represent the actual standard error of the DiD estimate but it represents something similar and can be useful to get an intuition for this trade-off. The formula is the following:\n\\[se_{\\bar{y_T} - \\bar{y_c}} = \\sqrt{\\dfrac{\\sigma_T^2}{n_T} + \\dfrac{\\sigma_C^2}{n_C}}\\] where \\(n_T\\) and \\(n_C\\) are the number of observation in the treated group and the control group respectively and \\(\\sigma_T\\) and \\(\\sigma_C\\) the standard deviations of the outcome in the treated group and the control group respectively. In many cases, we can assume that \\(\\sigma_T = \\sigma_C = \\sigma\\). Under this assumption we have:\n\\[se_{\\bar{y_T} - \\bar{y_c}} = \\dfrac{\\sigma}{\\sqrt{n}} \\times \\sqrt{\\dfrac{1}{p_T(1-p_T)}}\\] where \\(n\\) is the total number of observations and \\(p_T\\) the proportion of treated observations.\nFrom this simple formula it is obvious that the standard error of interest increases when \\(n\\) decreases and that, for \\(n\\) constant, it is minimized when the proportion of treated is 0.5. If there are less treated than control, one may think of decreasing the number of observations in the control group to get to \\(p_T = 0.5\\). Yet, this will also reduce \\(n\\) and the first equation makes clear that only reducing \\(n_C\\) will increase the standard error of interest.\nThe unbalance between the number of treated and controls is more general than only event studies and DiD but is particularly salient in this case.\nAn illustrative example\nFor readability and to illustrate this loss in power, we consider an example setting. For this illustration we could use a large variety of Data Genereting Processes (DGP), both in terms of distribution of the variables and of relations between them. We narrow this down to an example setting, considering an analysis of health impacts of air pollution. More precisely, we simulate and analyze the impacts of air pollution reduction on birthweights. Air pollution might vary with other variables that may also affect birthweight (for instance economic activity). Some of these variables might be unobserved and bias estimates of a simple regression of birthweight on pollution levels. A strategy to avoid such issues is to consider exogenous shocks to air pollution such as plant closures, plant openings, creation of a low emission zone or an urban toll, strikes, etc.\nEven if we consider an example setting for clarity, the unconfoundedness / exaggeration trade-off mediated by the number of observations treated should also arise in other settings.\nModeling choices\nTo simplify, we consider the assumptions described below. Of course these assumptions are arbitrary and we invite you to play with them. \nAs many studies in the literature, for instance Currie et al. (2015) and Lavaine and Neidell (2017), to build a panel, we aggregate observations. We look at the evolution of birthweights in zip codes in time, for instance months.\nFor clarity in the explanations, let’s assume that the exogenous shock considered is a permanent plant closure and that this reduces air pollution level. If the reader prefers, they can think of it as any permanent exogenous change in air pollution levels. For now, we will only estimate a reduced form. We are therefore not interested in modeling the effect of the plant closure on pollution levels. We consider that the plant closure leads to some air pollution reduction and want to estimate the effect of this closure on birthweight. We plan to add pollution in the future in order to compare the performance of the reduced form and a straight regression of birthweight on pollution. Yet, generating pollution is rather complex and we therefore only consider the reduced form for now.\nFor each time period, a zip code is either treated (plant closed) or not treated. Over the whole period, some zip codes experience a plant closure, others do not either because they do not have a plant that affect their air pollution levels or because their plant did not close.\nWe consider that the average birthweight in zip code \\(z\\) at time period \\(t\\), \\(w_{zt}\\), depends on a zip code fixed effect \\(\\zeta_z\\), a time fixed effect \\(\\tau_t\\) and the treatment status \\(T_i\\), ie whether a plant closed in this period or not. For now, we do not simulate omitted variable biases as we consider that the shocks are truly exogenous. Thus, birthweight is defined as follows:\n\\[w_{z,t} = \\alpha + \\beta T_{z, t} + \\zeta_z + \\tau_t + \\epsilon_{z,t}\\] \n\n\n\n\n\nTo simplify, we consider the following additional assumptions:\nThe treatment is constant in time and homogeneous across zip codes. In this case, the two ways fixed effect estimation should yield a correct estimate of the ATET (as discussed in de Chaisemartin and d’Haultfoeuille (2022) for instance)\nA proportion \\(p_{treat}\\) of zip codes are ever treated over the period. Hence, a proportion of \\(1-p_{treat}\\) zip codes are never treated over the period. We draw these zip codes at random. Note that drawing at random is not necessary here. Without loss of generality, we could assume that the non-treated zip codes are those with the larger zip codes identifiers for instance,\nWe assume that, among treated zip codes, on average half of the observations are treated. This choice is arbitrary but we choose that such that the treatment happens on average in middle of the of the time period,\nThe implementation of the treatment can be staggered or not. If it is not staggered, the treatment date is set to be in the middle of the period. For now we only analyze the non staggered version.\nMore precisely, we set:\n\\(N_z\\) the number of zip codes,\n\\(N_t\\) the number of periods (months),\n\\(\\zeta_z \\sim \\mathcal{N}(\\mu_{\\zeta}, \\sigma_{\\zeta}^{2})\\) the fixed effect for zip code \\(z\\),\n\\(\\tau_t \\sim \\mathcal{N}(\\mu_{\\tau}, \\sigma_{\\tau}^{2})\\) the fixed effect for time period \\(t\\),\n\\(\\epsilon_{zt} \\sim \\mathcal{N}(0, \\sigma_{\\epsilon}^{2})\\) some noise,\n\\(T_{zt}\\) represent the treatment allocation, it is equal to 1 if zip code \\(z\\) is treated at time \\(t\\) and 0 otherwise,\n\\(w_{z,t} = \\alpha + \\beta T_{z, t} + \\zeta_z + \\tau_t + \\epsilon_{z,t}\\) where \\(\\alpha\\) is a constant,\n\\(\\beta\\) is represents the magnitude of the treatment,\nWe define staggered as a logical variable.\nWe also create a bunch of variables that can be useful:\n\\(InTreatment_z\\) equal to 1 if zip code \\(z\\) ever gets treated,\n\\(t^{event}_z\\) equal to the date at which zip code \\(z\\) gets treated, especially useful in the staggered setting,\n\\(t^{centered}_z\\) representing the distance in terms of periods to the beginning of the treatment for zip code \\(z\\),\n\\(Post_{zt}\\) equal to 1 if the period \\(t\\) is after the treatment has begun for zip code \\(z\\). This variable is only useful for non-staggered treatment allocation case.\nData generation\nGenerating function\nWe write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\n\n\ngenerate_data_DID <- function(N_z,\n                              N_t,\n                              sigma_e,\n                              p_treat,\n                              staggered,\n                              alpha,\n                              beta,\n                              mu_zip_fe, \n                              sigma_zip_fe,\n                              mu_time_fe, \n                              sigma_time_fe\n                             ) {\n  \n  if (!is.logical(staggered)) {stop(\"staggered must be logical\")} \n  \n  data <- tibble(zip = 1:N_z) %>%\n    mutate(in_treatment = (zip %in% sample(1:N_z, floor(N_z*p_treat)))) %>% \n    crossing(t = 1:N_t) %>%\n    group_by(zip) %>%\n    mutate(\n      zip_fe = rnorm(1, mu_zip_fe, sigma_zip_fe),\n      # x = rnorm(1, 0, 350),\n      t_event = ifelse(staggered, sample(2:(N_t - 1), 1), floor(N_t/2)), \n        #We use 2:(N_t-1) to aalways have a pre and post period\n      t_event = ifelse(!in_treatment & staggered, NA, t_event)\n    ) %>%\n    ungroup() %>%\n    group_by(t) %>%\n    mutate(time_fe = rnorm(1, mu_time_fe, sigma_time_fe)) %>%\n    ungroup() %>%\n    mutate(\n      post = (t > t_event),\n      treated = in_treatment & post, \n      t_centered = t - t_event,\n      e = rnorm(nrow(.), 0, sigma_e),\n      birthweight0 = alpha + zip_fe + time_fe + e, #+ 1*x\n      birthweight1 = birthweight0 + beta,\n      birthweight = treated*birthweight1 + (1 - treated)*birthweight0\n    )\n  \n  return(data)\n}\n\n\n\nBaseline parameters’ values\nWe set baseline values for the parameters to emulate a somehow realistic observational study`.\nWe get “inspiration” for the values of parameters from Lavaine and Neidell (2017).\nWe consider that: - We consider a large number of zip codes (1000 zip codes) and time periods (24 months), - Birthweight is expressed in grams. In Lavaine and Neidell’s sample made of babies born in France, the average birthweight is 3228g (sd = 353). We choose alpha and sigma_e to yield a similar distribution. These values of course depend on the values of the other parameters - A usual treatment effect size in published studies is a change of about 1 to 3% in birthweight. We consider a 2% effect size. Thus, we set \\(\\beta = 3228 \\times 0.02 \\simeq 65\\) - We set time and individual fixed effects to be of half of the order of magnitude of the treatment effect and with a standard deviation roughly equal to their mean (somehow arbitrary choice), - In these type of analyses, plant closures do not happen often and therefore the proportion of treated observations is limited. As a baseline, we can assume that 5% of the plants close over the period. Translating it in terms of closures, in the two years of the study (24 months), out of the 1000 plants, 50 closed. This does not seem like a particularly large number as such closures are rare.\n\nN_z\nN_t\nsigma_e\np_treat\nstaggered\nalpha\nbeta\nmu_zip_fe\nsigma_zip_fe\nmu_time_fe\nsigma_time_fe\n5000\n24\n350\n0.05\nFALSE\n3163\n65\n33\n33\n33\n33\n\nHere is an example of data created with the data generating process and baseline parameter values, for 2 zip codes and 8 time periods and not displaying t_event, ìn_treatment, post and t_centered:\n\nzip\nt\ntreated\nbirthweight0\nbirthweight1\nbirthweight\ne\nzip_fe\ntime_fe\n1\n1\nFALSE\n3478.285\n3543.285\n3478.285\n279.62773\n62.92833\n-27.270935\n1\n2\nFALSE\n3464.416\n3529.416\n3464.416\n193.51133\n62.92833\n44.976155\n1\n3\nFALSE\n2963.249\n3028.249\n2963.249\n-216.66550\n62.92833\n-46.013694\n1\n4\nFALSE\n2979.283\n3044.283\n2979.283\n-309.09044\n62.92833\n62.445486\n1\n5\nFALSE\n3402.713\n3467.713\n3402.713\n153.79499\n62.92833\n22.989503\n1\n6\nFALSE\n3689.319\n3754.319\n3689.319\n435.42792\n62.92833\n27.962313\n1\n7\nFALSE\n3574.841\n3639.841\n3574.841\n312.53934\n62.92833\n36.373142\n1\n8\nFALSE\n3766.312\n3831.312\n3766.312\n547.38907\n62.92833\n-7.005873\n2\n1\nFALSE\n3501.871\n3566.871\n3501.871\n353.42678\n12.71544\n-27.270935\n2\n2\nFALSE\n3123.960\n3188.960\n3123.960\n-96.73133\n12.71544\n44.976155\n2\n3\nFALSE\n3156.466\n3221.466\n3156.466\n26.76459\n12.71544\n-46.013694\n2\n4\nFALSE\n2940.645\n3005.645\n2940.645\n-297.51630\n12.71544\n62.445486\n2\n5\nTRUE\n2740.060\n2805.060\n2805.060\n-458.64488\n12.71544\n22.989503\n2\n6\nTRUE\n2613.528\n2678.528\n2678.528\n-590.15009\n12.71544\n27.962313\n2\n7\nTRUE\n3476.155\n3541.155\n3541.155\n264.06649\n12.71544\n36.373142\n2\n8\nTRUE\n3044.664\n3109.664\n3109.664\n-124.04605\n12.71544\n-7.005873\n\nWe check the standard deviation and means of the parameters:\n\nStatistic\nbirthweight0\nMean\n3222.8764\nStandard Deviation\n353.1331\n\nTreatment allocations in the staggered and non staggered case, when the proportion of treated is 30%, are as follows:\n\n\n\nQuick data exploration\nWe quickly explore a data set generated with our function. First, we look at the distribution of potential outcomes.\n\n\n\nThen, we compare the average birthweight before and after the treatment, in the control and treatment group.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEstimation\nWe then define a function to run the estimation.\n\n\nestimate_DID <- function(data) {\n  reg <- data %>% \n    mutate(\n      zip = as.factor(zip),\n      t = as.factor(t),\n      treated = as.numeric(treated),\n      in_treatment = as.numeric(in_treatment),\n      t_centered = as.factor(t_centered)\n    ) %>% \n    feols(\n      data = ., \n      fml = birthweight ~ treated | zip + t\n    ) %>% \n    broom::tidy() %>% \n    rename(p_value = p.value, se = std.error) %>% \n    select(-statistic) \n    # suppressMessages() #Warning saying that NA values dropped and \n    # #that one or two factors are removed due to colinearity\n  \n  return(reg)\n}\n\n\n\nHere is an example of an output of this function:\n\nterm\nestimate\nse\np_value\ntreated\n76.78378\n9.253189\n0\n\nOne simulation\nNote that to run power calculations, we need to have access to the true effects. Therefore, before running the estimation, we write a short function to compute the average treatment effect on the treated (ATET). We will add this information to the estimation results.\n\n\ncompute_true_effect_DID <- function(data) {\n  data %>% \n    filter(treated) %>% \n    summarise(true_effect = mean(birthweight1 - birthweight0)) %>% \n    .$true_effect\n}  \n\n\n\nWe can now run a simulation, combining generate_data_DID and estimate_DID. To do so we create the function compute_sim_DID. This simple function takes as input the various parameters. It returns a table with the estimate of the treatment, its p-value and standard error, the true effect, the proportion of treated units and whether the treatment was staggered or not. Note that for now, we do not store the values of the other parameters for simplicity because we consider them fixed over the study.\n\n\n\nHere is an example of an output of this function.\n\nterm\nestimate\nse\np_value\nN_z\nN_t\np_treat\ntrue_effect\ntreated\n70.99959\n9.277777\n0\n5000\n24\n0.05\n65\n\nAll simulations\nWe will run the simulations for different sets of parameters by mapping our compute_sim_DID function on each set of parameters. We thus create a table with all the values of the parameters we want to test, param_DID. Note that in this table each set of parameters appears N_iter times as we want to run the analysis \\(n_{iter}\\) times for each set of parameters.\n\n\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\",\"301\",\"302\",\"303\",\"304\",\"305\",\"306\",\"307\",\"308\",\"309\",\"310\",\"311\",\"312\",\"313\",\"314\",\"315\",\"316\",\"317\",\"318\",\"319\",\"320\",\"321\",\"322\",\"323\",\"324\",\"325\",\"326\",\"327\",\"328\",\"329\",\"330\",\"331\",\"332\",\"333\",\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\",\"342\",\"343\",\"344\",\"345\",\"346\",\"347\",\"348\",\"349\",\"350\",\"351\",\"352\",\"353\",\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"360\",\"361\",\"362\",\"363\",\"364\",\"365\",\"366\",\"367\",\"368\",\"369\",\"370\",\"371\",\"372\",\"373\",\"374\",\"375\",\"376\",\"377\",\"378\",\"379\",\"380\",\"381\",\"382\",\"383\",\"384\",\"385\",\"386\",\"387\",\"388\",\"389\",\"390\",\"391\",\"392\",\"393\",\"394\",\"395\",\"396\",\"397\",\"398\",\"399\",\"400\",\"401\",\"402\",\"403\",\"404\",\"405\",\"406\",\"407\",\"408\",\"409\",\"410\",\"411\",\"412\",\"413\",\"414\",\"415\",\"416\",\"417\",\"418\",\"419\",\"420\",\"421\",\"422\",\"423\",\"424\",\"425\",\"426\",\"427\",\"428\",\"429\",\"430\",\"431\",\"432\",\"433\",\"434\",\"435\",\"436\",\"437\",\"438\",\"439\",\"440\",\"441\",\"442\",\"443\",\"444\",\"445\",\"446\",\"447\",\"448\",\"449\",\"450\",\"451\",\"452\",\"453\",\"454\",\"455\",\"456\",\"457\",\"458\",\"459\",\"460\",\"461\",\"462\",\"463\",\"464\",\"465\",\"466\",\"467\",\"468\",\"469\",\"470\",\"471\",\"472\",\"473\",\"474\",\"475\",\"476\",\"477\",\"478\",\"479\",\"480\",\"481\",\"482\",\"483\",\"484\",\"485\",\"486\",\"487\",\"488\",\"489\",\"490\",\"491\",\"492\",\"493\",\"494\",\"495\",\"496\",\"497\",\"498\",\"499\",\"500\",\"501\",\"502\",\"503\",\"504\",\"505\",\"506\",\"507\",\"508\",\"509\",\"510\",\"511\",\"512\",\"513\",\"514\",\"515\",\"516\",\"517\",\"518\",\"519\",\"520\",\"521\",\"522\",\"523\",\"524\",\"525\",\"526\",\"527\",\"528\",\"529\",\"530\",\"531\",\"532\",\"533\",\"534\",\"535\",\"536\",\"537\",\"538\",\"539\",\"540\",\"541\",\"542\",\"543\",\"544\",\"545\",\"546\",\"547\",\"548\",\"549\",\"550\",\"551\",\"552\",\"553\",\"554\",\"555\",\"556\",\"557\",\"558\",\"559\",\"560\",\"561\",\"562\",\"563\",\"564\",\"565\",\"566\",\"567\",\"568\",\"569\",\"570\",\"571\",\"572\",\"573\",\"574\",\"575\",\"576\",\"577\",\"578\",\"579\",\"580\",\"581\",\"582\",\"583\",\"584\",\"585\",\"586\",\"587\",\"588\",\"589\",\"590\",\"591\",\"592\",\"593\",\"594\",\"595\",\"596\",\"597\",\"598\",\"599\",\"600\",\"601\",\"602\",\"603\",\"604\",\"605\",\"606\",\"607\",\"608\",\"609\",\"610\",\"611\",\"612\",\"613\",\"614\",\"615\",\"616\",\"617\",\"618\",\"619\",\"620\",\"621\",\"622\",\"623\",\"624\",\"625\",\"626\",\"627\",\"628\",\"629\",\"630\",\"631\",\"632\",\"633\",\"634\",\"635\",\"636\",\"637\",\"638\",\"639\",\"640\",\"641\",\"642\",\"643\",\"644\",\"645\",\"646\",\"647\",\"648\",\"649\",\"650\",\"651\",\"652\",\"653\",\"654\",\"655\",\"656\",\"657\",\"658\",\"659\",\"660\",\"661\",\"662\",\"663\",\"664\",\"665\",\"666\",\"667\",\"668\",\"669\",\"670\",\"671\",\"672\",\"673\",\"674\",\"675\",\"676\",\"677\",\"678\",\"679\",\"680\",\"681\",\"682\",\"683\",\"684\",\"685\",\"686\",\"687\",\"688\",\"689\",\"690\",\"691\",\"692\",\"693\",\"694\",\"695\",\"696\",\"697\",\"698\",\"699\",\"700\",\"701\",\"702\",\"703\",\"704\",\"705\",\"706\",\"707\",\"708\",\"709\",\"710\",\"711\",\"712\",\"713\",\"714\",\"715\",\"716\",\"717\",\"718\",\"719\",\"720\",\"721\",\"722\",\"723\",\"724\",\"725\",\"726\",\"727\",\"728\",\"729\",\"730\",\"731\",\"732\",\"733\",\"734\",\"735\",\"736\",\"737\",\"738\",\"739\",\"740\",\"741\",\"742\",\"743\",\"744\",\"745\",\"746\",\"747\",\"748\",\"749\",\"750\",\"751\",\"752\",\"753\",\"754\",\"755\",\"756\",\"757\",\"758\",\"759\",\"760\",\"761\",\"762\",\"763\",\"764\",\"765\",\"766\",\"767\",\"768\",\"769\",\"770\",\"771\",\"772\",\"773\",\"774\",\"775\",\"776\",\"777\",\"778\",\"779\",\"780\",\"781\",\"782\",\"783\",\"784\",\"785\",\"786\",\"787\",\"788\",\"789\",\"790\",\"791\",\"792\",\"793\",\"794\",\"795\",\"796\",\"797\",\"798\",\"799\",\"800\"],[5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000,5000],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24],[350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350,350],[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,falsecontainer\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>N_z<\\/th>\\n      <th>N_t<\\/th>\\n      <th>sigma_e<\\/th>\\n      <th>staggered<\\/th>\\n      <th>alpha<\\/th>\\n      <th>beta<\\/th>\\n      <th>mu_zip_fe<\\/th>\\n      <th>sigma_zip_fe<\\/th>\\n      <th>mu_time_fe<\\/th>\\n      <th>sigma_time_fe<\\/th>\\n      <th>p_treat<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,5,6,7,8,9,10,11]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\nWe then run the simulations by mapping our compute_sim_IV function on param_IV.\n\n\ntic()\nsim_DID <- pmap_dfr(param_DID, compute_sim_DID)\nbeep()\ntoc()\n\n# saveRDS(sim_DID, here(\"Outputs/sim_DID.RDS\"))\n\n\n\nAnalysis of the results\nQuick exploration\nFirst, we quickly explore the results.\n\n\n\nComputing bias and exaaggeration ratio\nWe want to compare \\(\\mathbb{E}[\\beta_0/\\widehat{\\beta}]\\) and \\(\\mathbb{E}[\\beta_0/ \\widehat{\\beta}|signif]\\). The first term represents the bias and the second term represents the exaggeration ratio. These terms depend on the true effect size.\n\n\nsummarise_sim_DID <- function(data) {\n  data %>%\n    mutate(significant = (p_value <= 0.05)) %>% \n    group_by(p_treat, N_z, N_t) %>%\n    summarise(\n      power = mean(significant, na.rm = TRUE)*100, \n      type_m = mean(ifelse(significant, abs(estimate/true_effect), NA), na.rm = TRUE),\n      exag_ratio = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      bias_all_median = median(estimate/true_effect, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup() %>% \n    mutate(n_treated = p_treat*N_z*N_t)\n} \n\nsummary_sim_DID <- summarise_sim_DID(sim_DID)\n# saveRDS(summary_sim_DID, here(\"Outputs/summary_sim_DID.RDS\"))\n\n\n\nMain graph\nTo analyze our results, we build a unique and simple graph:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "last_modified": "2022-03-01T23:20:21-05:00"
    },
    {
      "path": "experiments.html",
      "title": "Intuition, experimental studies and replication crisis",
      "description": "In this document, we analyze replications of experimental studies to illustrate the consequences of low statistical power in economics.",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nAnalyzing all studies\nFocus on one particular study\n\n\nbody {\ntext-align: justify}\nTo illustrate the consequences of low power, we analyze the results from Camerer et al (2016) through the prism of statistical power. The authors of this paper replicated laboratory experiments in economics.\nThey report their replication results, alongside the original results, on the project website, we only need to run their Stata script create_studydetails.do to recover all the infomation.\nWe then compute the power of the initial analysis if the true effect is in fact equal to the replication’s.\n\n\n\nAnalyzing all studies\nWe quickly plot and analyze the results obtained, ie the distribution of the exaggeration ratio and power.\n\n\n\nThe median power would be 0.93%. The median replicated estimates is equal to 0.96 times the original estimate.\nWe then compute the number and proportion of original studies that were statistically significant.\n\nOriginal estimate statistically significant\nNumber\nProportion\nNo\n2\n0.11\nYes\n16\n0.89\n\nWe then do the same thing for the replication studies.\n\nReplication estimate statistically significant\nNumber\nProportion\nNo\n7\n0.39\nYes\n11\n0.61\n\nWe then compute the proportion of original studies that would have adequate power as defined by the customary and arbitrary 80% threshold, still assuming that the true effect is equal to the replication one.\n\nAdequate power\nNumber\nProportion\nNo\n8\n0.44\nYes\n10\n0.56\n\nFocus on one particular study\nHere, we focus on one particular study in order to illustrate in more details the problem at play. We want to simulate what could have yielded replication of the initial study if the true effect was equal to the replication estimate.\nWe select one of the studies, Abeler et al. (2011), that we initially selected at random and draw the graph of interest. The way we calculated the standard error is not perfectly accurate so we use the information available in the replication report.\n\n\n\nIn red is the estimate from the original study and its 95% confidence interval\nThe estimate is significant and has been published. Yet, it is pretty noisy.\nIn blue is the estimate from the replicated study and its 95% confidence interval\nWe notice that this second estimate is both more precise and smaller than the initial one. It still remains noisy\nLet’s assume that the true effect is actually equal to this second estimate (note that this is unlikely)\nWould the design of the initial study be good enough to detect this true effect? ie if we replicated the initial study, could we reject the null of no effect (knowing that the true effect is equal to the replicated estimate)\nIn gray is the estimate form the replicated study but with a standard error equal to the initial study’s (approximately the standard errors that would have been obtained with the design of the initial study)\nThis estimate is non significant. In this instance, we would not have been able to reject the null of no effect\nNow, if we replicate this study 500 times, running 500 lab experiments, in some cases we would get statisitcally significant estimates (the beige dots) and in some others non statistically significant ones (the green dots)\nIf we would have been a bit more lucky, we could have gotten a sample of individuals that would have yielded one of the beige estimates\nNow, we notice that, on average, statistically significant estimates overestimate the true effect by a factor 2.4783975 (average of 0.1959678 while the true effect is 0.0790704). Gelman and Carlin call this inflation factor type M error.\nIn this case, the power is basically the proportion of statistically significant estimates\nIf the study had more power, the sd would be smaller and most estimates would be statistically significative (because there is indeed a non null effect)\nBut since the power is low, if by chance the sample of individuals we get yields a statistically significant estimate, this estimate will overestimate the true effect\n\n\n\n",
      "last_modified": "2022-03-01T23:20:31-05:00"
    },
    {
      "path": "index.html",
      "title": "Unconfounded but Inflated Causal Estimates",
      "author": [],
      "contents": "\n\n          \n      \n      Unconfounded but Inflated Causal Estimates\n      \n      \n      Paper\n      Summary\n      Intuition\n      \n      \n      Simulations\n       \n      ▾\n      \n      \n      RDD\n      IV\n      Matching\n      DiD / Event study\n      Crosscutting issues\n      \n      \n      Solutions\n      \n      \n      \n      ☰\n      \n      \n      \n        \n          \n            \n              \n            \n              Unconfounded but Inflated Causal Estimates\n            \n            \n              \n                \n                    \n                      \n                         GitHub\n                      \n                    \n                  \n                                  \n            \n          \n        \n        \n        \n          \n            Hi and welcome!\n            This website gathers code and additional material for the paper “Unconfounded but Inflated Causal Estimates” by Vincent Bagilet and Léo Zabrocki.\n            The website is still under construction. It is structured as follows:\n            A PDF version of the current version of the paper is accessible through the “Paper” tab.\n            A plain language summary is available in the “Summary” tab.\n            The “Intuition” tab describes, though an example, how inflation of statistically estimates may arise.\n            The “Simulations” tab describes the simulations for each identification strategy.\n            In the tab “Solutions” we will describe how to run power calculations. \n            All the R code for this project is available in its GitHub directory.\n            \n        \n      \n    \n\n    \n      \n        \n          \n            \n              \n            \n              Unconfounded but Inflated Causal Estimates\n            \n            \n              \n                \n                                    \n                    \n                       GitHub\n                    \n                  \n                                  \n              \n            \n            \n              Hi and welcome!\n              This website gathers code and additional material for the paper “Unconfounded but Inflated Causal Estimates” by Vincent Bagilet and Léo Zabrocki.\n              The website is still under construction. It is structured as follows:\n              A PDF version of the current version of the paper is accessible through the “Paper” tab.\n              A plain language summary is available in the “Summary” tab.\n              The “Intuition” tab describes, though an example, how inflation of statistically estimates may arise.\n              The “Simulations” tab describes the simulations for each identification strategy.\n              In the tab “Solutions” we will describe how to run power calculations. \n              All the R code for this project is available in its GitHub directory.\n              \n        \n      \n    \n\n    \n    \n    ",
      "last_modified": "2022-03-01T23:20:31-05:00"
    },
    {
      "path": "IV.html",
      "title": "Simulations IV",
      "description": "In this document, we run a simulation exercise to illustrate how using an Instrumental Variable (IV) strategy to avoid confounders may lead to a loss in power and inflated effect sizes.",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSummary and intuition\nAn illustrative exampleModeling choices\nData generation\nEstimation\nOne simulation\nAll simulations\n\nAnalysis of the resultsQuick exploration\nComputing bias and exaggeration ratios\nGraph\nF-statistic analysis\n\nStandard parameter values\n\n\nbody {\ntext-align: justify}\n\n\n\nSummary and intuition\nIn the case of the IV, the unconfoundedness / exaggeration trade-off is mediated by the ‘strength’ of the instrument considered. When the instrument only explains a limited portion of the variation in the explanatory variable, the IV can still be successful in avoiding confounders but power can low, potentially leading to exaggeration issues to arise.\nAn illustrative example\nTo illustrate this loss in power, we could consider a large variety of settings, distribution of the parameters or parameter values. We narrow this down to an example setting, considering only one setting and one set of parameter values. We examine an analysis of the impact of voter turnout on election results, instrumenting voter turnout with rainfall on the day of the election. Our point should stand in more general settings and the choice of values is mostly for illustration.\nA threat of confounders often arises when analyzing the link between voter turnout and election results. To estimate such an effect causally, one can consider exogeneous shocks to voter turnout such as rainfall. Some potential exclusion restriction problems have been highlighted in this instance but we abstract from them and simulate no exclusion restriction violations here.\nModeling choices\nFor simplicity, we consider several assumptions. This illustreation is not representative of the existing literature but the objective is only to calibrate our simulation with somehow realistic parameter values. Again, this illustration is very simplistic. The high level assumptions are:\nWe abstract from the panel dimension in this analysis and consider only one time period. This is could be considered as looking at the outcomes of a unique election.\nWe only consider the impact of rain on the day of the election.\nWe assume no correlation in rainfall between locations. This could be equivalent to considering only a set of remote locations.\nWe assume simplify the data generating process and thus do not add any exclusion restriction violations.\nThe DGP can be represented using the following Directed Acyclic Graph (DAG):\n\n\n\n\n\n\nThe DGP for the vote share of let’s say the republican party in location \\(i\\), \\(Share_i\\), is defined as follows:\n\\[Share_{i} = \\alpha + \\beta Turnout_{i} + \\delta u_{i} + e^{(S)}_{i}\\]\nWhere \\(\\alpha\\) is a constant, \\(u\\) represents an unobserved variable and \\(e^{(S)} \\sim \\mathcal{N}(0, \\sigma_{e_S})\\) noise. \\(\\beta\\) is the parameter of interest. We call it ‘treatment effect’.\nThe DGP for the turnout data is as follows:\n\\[Turnout_{i} = \\gamma + \\lambda Rain_{i} + \\eta u_{i} + e^{(T)}_{i}\\]\nWhere \\(\\mu\\) is a constant, \\(Rain\\) is either a continuous variable (amount of rain in location \\(i\\) on the day of the election) or a dummy variable (whether it rained or not) and \\(e^{(T)} \\sim \\mathcal{N}(0, \\sigma_{e_T})\\) noise. We refer to \\(\\lambda\\) as “IV strength”.\nThe impact on voter turnout on election outcome (share of the republican party) is estimated using 2 Stages Least Squares.\nMore precisely, we set:\n\\(N\\) the number of observations\n\\(Rain \\sim \\text{Gamma}(k, \\theta)\\), \\(Rain \\sim \\mathcal{N}(0, \\sigma_{R}^{2})\\) or \\(Rain \\sim \\text{Bernoulli}(p_R)\\) the instrument\n\\(u \\sim \\mathcal{N}(0, \\sigma_{u}^{2})\\) the unobserved variable\n\\(e^{(S)} \\sim \\mathcal{N}(0, \\sigma_{e_S}^{2})\\)\n\\(e^{(T)} \\sim \\mathcal{N}(0, \\sigma_{e_T}^{2})\\)\nWe assume that \\(\\delta = -\\eta\\) for simplicity. There is no actual basis for that and we may change that in the future. The opposite sign is just to get an upward bias, which makes the comparison between OLS and IV easier since the bias and the exaggeration go in the same direction.\nIf one abstract from the name of the variable, they can notice that this setting is actually very general.\nData generation\nGenerating function\nWe write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\nNote that the parameter type_rain describes whether \\(Rain\\) is a random sample from a normal or Bernoulli distribution. The distributions of rainfall heights can be approximated with a gamma distribution. The Bernoulli distribution is used if one only consider the impact of rain or no rain on voter turnout. A normal distribution does not represent actual rainfall distributions but is added to run these simulations in other contexts than linking rainfall, voter turnout and election outcomes.\ntype_rain can take the values gamma, bernoulli or normal. param_rain represents either \\(\\sigma_R\\) if \\(Rain\\) is normal, \\(p_R\\) if it is Bernoulli or a vector of shape and scale parameters for the gamma distribution.\nNote that, for readability, in this document, we only display the chunks of code that may be important to understand the assumptions behind our simulations and the way we built our simulation. We do not display all the arguably “technical” code, in particular the one used to generate tables and graphs. All this code is however openly available on the GitHub of the project.\n\n\ngenerate_data_IV <- function(N,\n                             type_rain, #\"gamma\", \"normal\" or \"bernoulli\"\n                             param_rain,\n                             sigma_u,\n                             sigma_es,\n                             sigma_et,\n                             alpha,\n                             gamma,\n                             treatment_effect,\n                             iv_strength,\n                             ovb_intensity\n                             ) {\n  \n  if (type_rain == \"bernoulli\") {\n    rain_gen <- rbernoulli(N, param_rain[1])\n  } else if (type_rain == \"normal\") {\n    rain_gen <- rnorm(N, 0, param_rain[1])\n  } else if (type_rain == \"gamma\") {\n    rain_gen <- rgamma(N, shape = param_rain[1], scale = param_rain[2])\n  } else {\n    stop(\"type_rain must be either 'bernoulli', 'gamma' or 'normal'\")\n  }\n  \n  data <- tibble(id = 1:N) %>%\n    mutate(\n      rain = rain_gen,\n      u = rnorm(nrow(.), 0, sigma_u),\n      e_s = rnorm(nrow(.), 0, sigma_es),\n      e_t = rnorm(nrow(.), 0, sigma_et),\n      turnout = gamma + iv_strength*rain - ovb_intensity*u + e_t,\n      share = alpha + treatment_effect*turnout + ovb_intensity*u + e_s\n    )\n\n  return(data)\n}\n\n\n\nBaseline parameters’ values\nWe set baseline values for the parameters to emulate a somehow realistic observational study.\nWe get “inspiration” for the values of parameters from Fujiwara et al. and Cooperman who replicates a work by Gomez et al..\nWe consider that:\nTurnout and vote share are expressed in percent\nFujiwara et al. find that “The trends specifications suggest that 1 millimeter of rainfall decreases turnout by 0.05–0.07 percentage points” and Gomez et al. (and thus Cooperman) find “a county that receives one inch of rainfall on election day is likely to have approximately 1 percentage point lower voter turnout” which is equivalent to a 1mm increase in rainfall is associated with about a 0.04 percentage points decrease in voter turnout. For simplicity in interpretation, when rainfall is not a dummy, it is expressed in centimeters. So, we will consider iv_strength in the range -0.1 and -1.3\nWe calibrate the distribution parameters to fit a mix if information from table 1 from both Fujiwara et al. and Cooperman (converting the rainfall into centimeters):\nA gamma distribution represents well the distribution of rainfall. Gamma distribution can have two parameters a shape and a scale. The mean is \\(shape \\times scale\\) and the variance \\(shape \\times scale^{2}\\). The parameters of the distribution of rainfall are comparable in both papers (mean 2.4 and standard deviation 6.6). We solve the system of mean and variance for shape and scale and get 0.13 and 18.\nThe magnitude of the effect of turnout on vote share is subject to intense debate in the literature (cf Shaw and Petrocik (2020) for instance). As underlined by Shaw and Petrocik and in Fowler (2013), some studies find large effects, others no effects or small effects. Fowler (2013) falls into the large effects category as described by the author himself. The study, for an extremely large shock in voter turnout, compulsory voting, finds “that the policy increased voter turnout by 24 percentage points which in turn increased the vote shares and seat shares of the Labor Party by 7 to 10 percentage points.” This correspond to a decrease in Republican vote share of approximately 0.3-0.4 when turnout increases by 1% (considering that his result is causal). These results being large, we consider effects that are smaller but of a similar magnitude: we simulate that when turnout increases by 1%, Republican vote share decreases by 0.1. This enable to test whether the design would be good enough to detect an effect that is not particularly large.\nWe set the intercepts and standard deviations of the errors to produce turnouts and vote shares consistent with the papers. Voter turnout parameters are roughly similar in both papers (mean 58 sd 14). The mean and standard deviation of Republican vote share are given in Fujiwara et al. (mean 55.3 and sd 14.2). We may actually take values from a recent election (eg the last presidential election)\nWe set the standard deviation of the omitted variable bias to be of the order of magnitude of the error terms. Being conservative, we set its intensity to be twice as large as the treatment effect.\nWe consider 10000 observations. This corresponds to data as the US county level as used in Hansford and Gomez (2010) for instance but here for 3 presidential elections. We could have chosen a larger sample size but this sample size is already particularly large and makes it easier to illustrate our point.\n\nWe thus consider the following parameters:\n\nN\ntype_rain\nparam_rain\nsigma_u\nsigma_es\nsigma_et\nalpha\ngamma\ntreatment_effect\niv_strength\novb_intensity\n10000\ngamma\n0.13, 18.00\n14\n14\n13\n60\n59\n-0.1\n-0.5\n0.2\n\nHere is an example of data created with our data generating process:\n\nid\nrain\nu\ne_s\ne_t\nturnout\nshare\n1\n0.0000009\n-14.845292\n3.8035285\n-9.122413\n52.84664\n55.54981\n2\n4.1225906\n10.809889\n-12.3491838\n13.081613\n67.85834\n43.02696\n3\n0.0111111\n-18.781816\n14.9971788\n3.109154\n65.85996\n64.65482\n4\n0.0577896\n15.061931\n-22.3897154\n-17.391637\n38.56708\n36.76596\n5\n0.0000000\n-30.670425\n-12.1163207\n-12.102892\n53.03119\n36.44647\n6\n1.7671631\n18.054068\n-3.5026537\n-10.322011\n44.18359\n55.68980\n7\n0.3663275\n-19.818312\n23.4872695\n-22.358639\n40.42186\n75.48142\n8\n0.0000010\n24.638549\n0.0728378\n15.522809\n69.59510\n58.04104\n9\n0.1154740\n-9.516666\n18.4959670\n-5.799378\n55.04622\n71.08801\n10\n1.6566806\n-7.003431\n-6.0623160\n12.180934\n71.75328\n45.36167\n\nExploring the distribution of the data\nWe just quickly explore the distribution of the data for a baseline set of parameters. For this, we consider a mid range value for IV strength (-0.5).\n\n\n\nWe also check the standard deviation and means of the variables:\n\nStatistic\nshare\nturnout\nrain\nMean\n53.95842\n57.57324\n2.362443\nStandard Deviation\n14.46488\n13.64635\n6.443452\n\nEstimation\nAfter generating the data, we can run an estimation. We want to compare the IV and the OLS for different IV strength values. Hence, we need to estimate both an IV and an OLS and return both set of outcomes of interest.\n\n\nestimate_IV <- function(data) {\n  reg_IV <- AER::ivreg(\n    data = data, \n    formula = share ~ turnout | rain\n    ) \n  \n  fstat_IV <- summary(\n    reg_IV, \n    diagnostics = TRUE\n  )$diagnostics[\"Weak instruments\", \"statistic\"]\n  \n  reg_IV <- reg_IV %>% \n    broom::tidy() %>%\n    mutate(\n      model = \"IV\",\n      fstat = fstat_IV\n    )\n  \n  reg_OLS <- lm(\n    data = data, \n    formula = share ~ turnout\n    ) %>% \n    broom::tidy() %>%\n    mutate(\n      model = \"OLS\",\n      fstat = NA\n    )\n  \n  reg_OLS_unbiased <- lm(\n    data = data, \n    formula = share ~ turnout + u\n    ) %>% \n    broom::tidy() %>%\n    mutate(\n      model = \"OLS unbiased\",\n      fstat = NA\n    )\n  \n  reg <- reg_IV %>% \n    rbind(reg_OLS) %>% \n    rbind(reg_OLS_unbiased) %>% \n    filter(term == \"turnout\") %>%\n    rename(p_value = p.value, se = std.error) %>%\n    select(estimate, p_value, se, fstat, model) %>% \n  \n  return(reg)\n}\n\n\n\nOne simulation\nWe can now run a simulation, combining generate_data_IV and estimate_IV. To do so we create the function compute_sim_IV. This simple function takes as input the various parameters. It returns a table with the estimate of the treatment, its p-value and standard error, the F-statistic for the IV, the true effect, the IV strength and the intensity of the OVB considered (ovb_intensity). Note for now, that we do not store the values of the other parameters for simplicity because we consider them fixed over the study.\n\n\ncompute_sim_IV <- function(N,\n                           type_rain,\n                           param_rain,\n                           sigma_u,\n                           sigma_es,\n                           sigma_et,\n                           alpha,\n                           gamma,\n                           treatment_effect,\n                           iv_strength,\n                           ovb_intensity) {\n  generate_data_IV(\n    N = N,\n    type_rain = type_rain,\n    sigma_u = sigma_u,\n    param_rain = param_rain,\n    sigma_es = sigma_es,\n    sigma_et = sigma_et,\n    alpha = alpha,\n    gamma = gamma,\n    treatment_effect = treatment_effect,\n    iv_strength = iv_strength,\n    ovb_intensity = ovb_intensity\n  ) %>%\n    estimate_IV() %>%\n    mutate(\n      iv_strength = iv_strength,\n      ovb_intensity = ovb_intensity,\n      true_effect = treatment_effect\n    )\n} \n\n\n\nAll simulations\nWe will run the simulations for different sets of parameters by mapping our compute_sim_IV function on each set of parameters. We thus create a table with all the values of the parameters we want to test, param_IV. Note that in this table each set of parameters appears n_iter times as we want to run the analysis \\(n_{iter}\\) times for each set of parameters.\n\n\n\nWe then run the simulations by mapping our compute_sim_IV function on param_IV.\n\n\n\nAnalysis of the results\nQuick exploration\nFirst, we quickly explore the results.\n\n\n\nWe notice that the OLS is always biased and that the IV is never biased. However, for limited IV strengths, the distribution of the estimates flattens. The smaller the IV strength, the most like it is to get an estimate away from the true value, even though the expected value remains equal to the true effect size. \nComputing bias and exaggeration ratios\nWe want to compare \\(\\mathbb{E}[\\beta_0/\\widehat{\\beta_{IV}}]\\) and \\(\\mathbb{E}[\\beta_0/ \\widehat{\\beta_{IV}}|\\text{signif}]\\). The first term represents the bias and the second term represents the exaggeration ratio.\n\n\nsummarise_simulations <- function(data) {\n  data %>%\n    mutate(significant = (p_value <= 0.05)) %>% \n    group_by(ovb_intensity, iv_strength, model) %>%\n    summarise(\n      power = mean(significant, na.rm = TRUE)*100, \n      type_m = mean(ifelse(significant, abs(estimate/true_effect), NA), na.rm = TRUE),\n      bias_signif = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      bias_all_median = median(estimate/true_effect, na.rm = TRUE),\n      median_fstat = mean(fstat, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup()\n} \n\nsummary_sim_IV <- summarise_simulations(sim_IV)\n# saveRDS(summary_sim_IV, here(\"Outputs/summary_sim_IV.RDS\"))\n\n\n\nGraph\nTo analyze our results, we build a unique and simple graph:\n\n\n\nWe notice that, if the IV strength is low, on average, statistically significant estimates overestimate the true effect. If the IV strength is too low, it might even be the case that the benefit of the IV is overturned by the exaggeration issue. The IV yields an unbiased estimate and enables to get rid of the OVB but such statistically significant estimates fall, on average, even further from the true effect.\nOf course, if one considers all estimates, as the IV is unbiased, this issue does not arise.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nF-statistic analysis\nWe then run some exploratory analysis to see the link between type M and F-stat (under construction).\n\n\n\nUnsurprisingly, there is a clear positive correlation between what we call IV strength and the F-statistic. We then investigate the link between exaggeration ratios and F-statistics.\n\n\n\nWe notice that, even when the F-statistic is greater than the usual but arbitrary threshold of 10, statistically significant estimates may, on average overestimate the true effect.\nWe cannot compute directly the bias of interest against the F-statistic because the F-statistic is not a parameter of the simulations and we do not control them, only the IV strength. To overcome this, we compute the median power by binned F-statistic. However, this is not correct as we end up comparing and pulling together simulations with different parameter values. We still display the graph, keeping this limitation in mind:\n\n\n\nStandard parameter values\nFor simplicity and for communication purposes, we considered an applied example. However, our results can also hold in general settings. We illustrate this, considering that most of the variables are distributed according to standard normal distributions. We keep the same DAG as it is the classic IV DAG. We also keep the same variable names but one should abstract from their meaning as they do not represent the same measure any longer.\nWe define the following parameters:\n\nN\ntype_rain\nparam_rain\nsigma_u\nsigma_es\nsigma_et\nalpha\ngamma\ntreatment_effect\novb_intensity\n500\nnormal\n1\n1\n1\n1\n0\n0\n-1\n-0.5\n\nWe then run the whole analysis as before, with an OVB intensity of 0.4 so that it is not extremely large.\n\n\n\nThe results and the overall illustration are comparable with the political economy example.\n\n\n\n\n\n\n\n\n\n",
      "last_modified": "2022-03-01T23:21:21-05:00"
    },
    {
      "path": "Matching.html",
      "title": "Matching Simulations",
      "description": "In this document, we run a simulation exercise to illustrate how using a matching procedure to avoid confounding may create type M error.\"\n",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://lzabrocki.github.io/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nLoading Packages\nData Generating ProcedureGeneral Approach\nFunction to Generate the Data\nEDA for One Dataset\n\nOutcome Regression Analysis\nMatching ProcedurePropensity Score Function\nSimulations\n\n\n\nbody {\ntext-align: justify}\nIn this document, we show through simulations how matching procedures targeting the common support of the data could be under-powered and lead to inflated statistically significant estimates. We illustrate this issue with fake-data similar to those from non-randomized labor training programs. In this case, treated individuals self-select themselves to get the treatment and may therefore have different characteristics from individuals who do not enroll in the program. To estimate the causal effect of the treatment on treated, researchers can rely on matching, which is a pre-processing technique to approximate an hypothetical randomized experiment. The method has three main advantages:\nContrary to outcome regression approach, it does not directly model the relationship between the treatment of interest and the outcome\nIt adjusts non-parametrically for observed confounders\nBy pruning control units not similar to treated units, matching help reveal the common support of the data upon which researchers can more confidently draw their inference. Statistical models used to analyze the resulting data will suffer less from extrapolation bias.\nThe method however relies on the strong assumption that no unmeasured confounders exist and, depending on its stringency, may discard many units from the analysis. This second limit could result in a lack of statistical power to estimate the average treatment on the treated. If journal editors and researchers favor studies based on the their statistical significance, under-powered studies based on matching procedures could lead to estimates that are too large.\nLoading Packages\nWe first load the required packages to set-up the simulations:\n\n\n# load required packages\nlibrary(knitr) # for creating the R Markdown document\nlibrary(tidyverse) # for data manipulation and visualization\nlibrary(MatchIt) # for matching analysis\nlibrary(lmtest) # for modifying regression standard errors\nlibrary(sandwich) # for robust and cluster robust standard errors\nlibrary(DT) # for displaying the data as tables\nlibrary(mediocrethemes) # vincent's custom ggplot2 theme\nlibrary(tictoc) # for measuring running time\nlibrary(beepr) # for making a sound when the code is done\nlibrary(here) # for paths management\n\n# set ggplot theme\nset_mediocre_all(pal = \"coty\")\n\n\n\nData Generating Procedure\nGeneral Approach\nTo illustrate how matching procedures could be particularly sensitive to statistically significant estimates that inflated, we simulate fake-data from a non-randomized labor training program targeting young individuals. Below are the main steps of the simulation:\nWe first create the units identifiers (id). Each unit is an individual.\nMany simulations found in the applied statistics literature test the performance on matching algorithms by first simulating covariates and then simulating the true but unknown propensity to be treated of units. Our goal here is different as we do not want to test the performance of various matching algorithms but rather illustrate how a lack of common overlap in propensity scores can result in a loss statistical power. We therefore first assign a fraction of individual (p_treat) to the treatment and then simulate the true propensity score variable true_ps for treated and control units. For treated units, we draw the propensity scores from a normal distribution \\(N(\\mu_{T}, \\sigma_{T})\\) and for control units, from a normal distribution \\(N(\\mu_{C}, \\sigma_{C})\\).\nOnce the the true propensity scores are created, we define the potential outcomes of each individual. Here, potential outcomes represent the income (in euros) of the individuals if they undertake the training program or not. The potential outcome without treatment adoption, Y(0), is simulated using the following equation: \\(Y_{0} = Wage \\times True Propensity Score + N(\\mu_{noise}, \\sigma_{noise})\\). This equation makes the potential outcomes Y(0) partly different for treated and control units.\nWe finally simulate the potential outcomes when individuals benefit from the training program. The average treatment effect on the treated (ATT) was set to a constant effect of +100 euros. The average treatment effect on the control (ATC) was set to a constant effect of +50. The constant treatment effect assumption is made to simply the illustration of the issue we are interested in. In our simulations, when we make the propensity score matching more stringent, not all treated units will be matched to similar control units. The causal estimand will no longer be the ATT and we should compute it true effect for each iteration if the causal effect was not constant.\nFunction to Generate the Data\nWe display below the code for the function generate_data_matching() which creates the required dataset. Its arguments are the desired sample size (sample_size), the proportion of treated units (p_treat), the mean and standard deviation of the propensity score distributions of treated and control units (mu_t, sigma_t, mu_c, sigma_c), the baseline wage wage, the noise of the equation for simulating the Y(0) (mu_noise, sigma_noise), the ATC and ATT (atc, att).\n\n\ngenerate_data_matching <- function(sample_size,\n                                    p_treat,\n                                    mu_t,\n                                    sigma_t,\n                                    mu_c,\n                                    sigma_c,\n                                    wage,\n                                    mu_noise,\n                                    sigma_noise,\n                                    atc,\n                                    att) {\n  data <- tibble(id = 1:sample_size) %>%\n    mutate(\n      # assign treatment status\n      treatment = rbinom(n = sample_size, size = 1, prob = p_treat),\n      # create the propensity score distributions\n      true_ps = ifelse(\n        treatment == 0,\n        rnorm(n(), mean = mu_c, sd = sigma_c),\n        rnorm(n(), mean = mu_t, sd = sigma_t)\n      ),\n      # make sure that the propensity score is between 0 and 1\n      true_ps = case_when(true_ps > 1 ~ 1,\n                          true_ps < 0 ~ 0,\n                          true_ps >= 0 & true_ps <= 1 ~ true_ps),\n      # generate the potential outcomes\n      y_0 = wage * true_ps + rnorm(n(), mean = 300, sd = 200),\n      y_0 = y_0 %>% round(., 0),\n      y_1 = ifelse(treatment == 1,\n                   y_0 + att,\n                   y_0 + atc),\n      # generate observed outcomes\n      y_obs = ifelse(treatment == 1, y_1, y_0) %>% round(., 0)\n    )\n  return(data)\n}\n\n\n\nIn our simulations, we use the following parameters to create a data of 300 units, with about 25% being treated, and with a lack of common overlap in the propensity scores for treated and control units:\n\nsample_size\np_treat\nmu_t\nsigma_t\nmu_c\nsigma_c\nwage\nmu_noise\nsigma_noise\natc\natt\n300\n0.25\n0.5\n0.1\n0.3\n0.1\n2000\n300\n200\n50\n100\n\nEDA for One Dataset\nWe run one iteration of the function generate_data_matching() to explore the resulting data with 500 units:\n\n\n{\"x\":{\"filter\":\"none\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\",\"252\",\"253\",\"254\",\"255\",\"256\",\"257\",\"258\",\"259\",\"260\",\"261\",\"262\",\"263\",\"264\",\"265\",\"266\",\"267\",\"268\",\"269\",\"270\",\"271\",\"272\",\"273\",\"274\",\"275\",\"276\",\"277\",\"278\",\"279\",\"280\",\"281\",\"282\",\"283\",\"284\",\"285\",\"286\",\"287\",\"288\",\"289\",\"290\",\"291\",\"292\",\"293\",\"294\",\"295\",\"296\",\"297\",\"298\",\"299\",\"300\"],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],[0.35,0.33,0.22,0.43,0.35,0.44,0.25,0.33,0.55,0.48,0.37,0.25,0.22,0.26,0.43,0.4,0.46,0.27,0.6,0.29,0.39,0.27,0.46,0.44,0.57,0.11,0.38,0.1,0.19,0.39,0.5,0.5,0.37,0.41,0.21,0.31,0.59,0.31,0.29,0.24,0.15,0.34,0.28,0.33,0.25,0.57,0.2,0.23,0.22,0.41,0.25,0.32,0.2,0.17,0.33,0.02,0.32,0.21,0.22,0.41,0.29,0.18,0.34,0.5,0.32,0.25,0.32,0.23,0.22,0.33,0.52,0.26,0.41,0.16,0.79,0.23,0.38,0.24,0.56,0.55,0.3,0.31,0.06,0.46,0.13,0.18,0.36,0.24,0.23,0.54,0.55,0.3,0.31,0.26,0.33,0.51,0.22,0.46,0.35,0.31,0.43,0.41,0.47,0.34,0.53,0.51,0.34,0.27,0.34,0.06,0.22,0.25,0.29,0.26,0.24,0.22,0.32,0.33,0.38,0.3,0.35,0.43,0.28,0.36,0.33,0.35,0.37,0.53,0.48,0.31,0.37,0.19,0.28,0.22,0.26,0.51,0.33,0.39,0.39,0.38,0.35,0.46,0.41,0.41,0.33,0.42,0.23,0.23,0.51,0.16,0.29,0.33,0.34,0.69,0.28,0.39,0.11,0.25,0.4,0.22,0.49,0.29,0.42,0.39,0.18,0.23,0.4,0.52,0.35,0.64,0.42,0.48,0.48,0.32,0.16,0.51,0.21,0.56,0.3,0.22,0.33,0.35,0.31,0.28,0.46,0.26,0.25,0.23,0.23,0.34,0.21,0.41,0.17,0.37,0.15,0.3,0.28,0.4,0.27,0.49,0.5,0.22,0.39,0.42,0.24,0.36,0.38,0.25,0.45,0.43,0.32,0.17,0.36,0.09,0.44,0.4,0.26,0.2,0.5,0.32,0.35,0.37,0.19,0.28,0.32,0.42,0.42,0.24,0.64,0.27,0.27,0.21,0.62,0.36,0.29,0.31,0.41,0.47,0.49,0.35,0.23,0.27,0.39,0.23,0.27,0.25,0.49,0.28,0.63,0.41,0.32,0.42,0.17,0.55,0.22,0.63,0.43,0.2,0.34,0.27,0.62,0.35,0.32,0.28,0.26,0.38,0.42,0.32,0.31,0.33,0.26,0.13,0.42,0.22,0.27,0.44,0.25,0.26,0.44,0.23,0.39,0.22,0.19,0.42,0.19,0.26,0.08,0.08,0.35,0.6,0.29,0.37,0.39,0.56,0.2,0.22,0.24,0.38,0.19,0.46],[821,559,729,1052,1149,1137,1305,977,1661,1145,1294,1241,643,1108,1408,1341,1485,821,1371,1018,952,790,1099,1749,1250,514,1130,377,825,1073,1655,1578,1224,703,1065,759,1507,597,756,953,524,727,889,888,714,1577,562,369,910,1063,655,1165,353,747,1089,480,1235,927,817,1108,1064,638,739,1706,665,933,886,824,842,1249,1518,945,1051,97,2003,1025,798,702,1287,1343,758,1140,740,1473,775,188,1231,873,685,1488,1195,1189,783,814,860,1457,671,1391,961,799,1326,867,1567,932,1438,1384,1087,1181,927,436,726,705,874,973,648,718,1117,677,1000,441,1042,1544,588,780,836,927,878,1327,1341,1105,871,976,914,693,770,1166,1103,500,951,1076,1326,1422,1018,1004,1041,1113,948,906,1453,529,1005,966,749,1682,959,1100,448,1013,1155,784,1328,1120,1075,1033,718,857,1079,1504,1043,1679,1014,1614,1472,995,655,1465,722,1493,967,529,574,958,1114,836,897,925,691,872,848,980,441,997,502,1399,481,1160,997,1057,1132,1050,1493,724,850,1197,469,1200,1241,930,1485,950,739,778,1092,373,974,1199,803,780,1372,1119,1398,936,631,972,1225,1474,1466,632,1300,953,883,533,1894,1047,848,752,1250,1203,1395,832,631,897,1012,810,803,901,1177,922,1460,936,900,1241,497,1745,557,1576,1057,517,850,831,1887,612,447,897,860,964,1194,934,1135,962,568,801,1373,825,851,1153,1069,649,1070,887,773,772,535,1506,835,939,554,711,989,1694,1024,1471,1114,1565,711,864,726,877,805,1086],[871,609,779,1102,1199,1187,1355,1027,1761,1195,1344,1291,693,1158,1458,1391,1535,871,1471,1068,1002,840,1199,1799,1350,564,1180,427,875,1123,1755,1628,1274,803,1115,809,1607,647,806,1003,574,777,939,938,764,1677,612,419,960,1163,705,1215,403,797,1139,530,1285,977,867,1208,1114,688,839,1806,715,983,936,874,892,1349,1618,995,1101,147,2103,1075,898,752,1387,1443,808,1190,790,1573,825,238,1281,923,735,1538,1295,1239,833,864,910,1557,721,1441,1011,849,1376,917,1667,982,1538,1484,1137,1231,1027,486,776,755,924,1023,698,768,1217,727,1100,491,1092,1644,638,830,886,977,928,1427,1441,1205,971,1026,964,743,820,1266,1153,600,1051,1176,1426,1472,1118,1104,1091,1163,998,956,1553,579,1055,1016,799,1782,1009,1150,498,1063,1205,834,1378,1170,1125,1083,768,907,1129,1554,1093,1779,1114,1664,1522,1045,705,1565,772,1593,1017,579,624,1008,1164,886,997,1025,741,922,898,1030,491,1047,552,1449,531,1210,1047,1107,1182,1150,1593,774,900,1247,519,1250,1291,980,1535,1050,789,828,1192,423,1024,1249,853,830,1472,1169,1448,986,681,1022,1275,1524,1516,682,1400,1003,933,583,1994,1097,898,802,1350,1253,1445,882,681,947,1062,860,853,951,1277,972,1560,986,1000,1291,547,1845,607,1676,1157,567,900,881,1987,662,497,947,910,1014,1244,984,1185,1012,618,851,1473,875,901,1253,1119,699,1120,937,823,822,585,1606,885,989,604,761,1039,1794,1074,1521,1164,1665,761,914,776,927,855,1186],[821,559,729,1052,1149,1137,1305,977,1761,1145,1294,1241,643,1108,1408,1341,1485,821,1471,1018,952,790,1199,1749,1350,514,1130,377,825,1073,1755,1578,1224,803,1065,759,1607,597,756,953,524,727,889,888,714,1677,562,369,910,1163,655,1165,353,747,1089,480,1235,927,817,1208,1064,638,839,1806,665,933,886,824,842,1349,1618,945,1051,97,2103,1025,898,702,1387,1443,758,1140,740,1573,775,188,1231,873,685,1488,1295,1189,783,814,860,1557,671,1391,961,799,1326,867,1667,932,1538,1484,1087,1181,1027,436,726,705,874,973,648,718,1217,677,1100,441,1042,1644,588,780,836,927,878,1427,1441,1205,971,976,914,693,770,1266,1103,600,1051,1176,1426,1422,1118,1104,1041,1113,948,906,1553,529,1005,966,749,1782,959,1100,448,1013,1155,784,1328,1120,1075,1033,718,857,1079,1504,1043,1779,1114,1614,1472,995,655,1565,722,1593,967,529,574,958,1114,836,997,1025,691,872,848,980,441,997,502,1399,481,1160,997,1057,1132,1150,1593,724,850,1197,469,1200,1241,930,1485,1050,739,778,1192,373,974,1199,803,780,1472,1119,1398,936,631,972,1225,1474,1466,632,1400,953,883,533,1994,1047,848,752,1350,1203,1395,832,631,897,1012,810,803,901,1277,922,1560,936,1000,1241,497,1845,557,1676,1157,517,850,831,1987,612,447,897,860,964,1194,934,1135,962,568,801,1473,825,851,1253,1069,649,1070,887,773,772,535,1606,835,939,554,711,989,1794,1024,1471,1114,1665,711,864,726,877,805,1186]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>id<\\/th>\\n      <th>treatment<\\/th>\\n      <th>true_ps<\\/th>\\n      <th>y_0<\\/th>\\n      <th>y_1<\\/th>\\n      <th>y_obs<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}\nAbout 22.6666667% of units are treated. We display below the true propensity score distributions by treatment status:\n\n\n\nThe distribution of potential outcomes Y(0) should be different across the two groups:\n\n\n\nWe can also see how the observed revenue is distributed across the two groups:\n\n\n\nWe can check whether the ATT and ATC were correctly simulated. The ATT is computed such as:\n\n\n# checking att\nmean(data$y_1[data$treatment==1]) - mean(data$y_0[data$treatment==1])\n\n\n[1] 100\n\nand the ATC:\n\n\n# checking atc\nmean(data$y_1[data$treatment==0]) - mean(data$y_0[data$treatment==0])\n\n\n[1] 50\n\nThe data have been correctly simulated.\nOutcome Regression Analysis\nBefore moving to the matching procedure, readers might be interested to see what would happen if we analyze our simulated datasets with a simple outcome regression model? Would we recover the true answer?\nWe first create a regression function to run a simple regression model where we simply regress the observed income on the treatment indicator:\n\n\noutcome_regression <- function(data) {\n  data %>%\n    lm(\n      y_obs ~ treatment,\n      data = .\n    ) %>%\n    broom::tidy(., conf.int = TRUE) %>%\n    filter(term == \"treatment\") %>%\n    select(estimate, p.value, conf.low, conf.high)\n}\n\n\n\nWe then simulate 1000 datasets of 300 units and run the regression model:\n\n\n# first simulate simulation id\ndata_sim_ex <- tibble(sim_id = 1:1000) %>%\n  # then simulate data\n  mutate(data = map(\n    sim_id,\n    ~ pmap_dfr(baseline_param_match, generate_data_matching)\n    )\n  ) %>%\n  # finally run the reg analysis\n  mutate(results = map(data, ~ outcome_regression(.)))\n\n# unnest the results\ndata_sim_ex <- data_sim_ex %>%\n  select(-data) %>%\n  unnest(results)\n\n# saveRDS(data_sim_ex, here(\"Outputs/data_sim_ex.RDS\"))\n\n\n\nWe plot the distribution of estimates:\n\n\ndata_sim_ex <- readRDS(here(\"Outputs/data_sim_ex.RDS\"))\n\ndata_sim_ex %>%\n  ggplot(., aes(x = estimate)) +\n  geom_density(colour = NA) +\n  geom_vline(xintercept = mean(data_sim_ex$estimate)) +\n  annotate(\"text\", x = 540, y = 0.009, label = \"Mean of Estimates\") + \n  annotate(\"text\", x = 125, y = 0.009, label = \"True ATT\") + \n  geom_vline(xintercept = 100, colour = \"#EAA95C\") +\n  scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +\n  ggtitle(\"Distribution of Outcome Regression Estimates\") + \n  xlab(\"Estimates of Treatment Effect (in euros)\") + ylab(\"Density\") +\n  labs(fill = 'Status:')\n\n\n\n\nWith an outcome regression analysis, the average of estimates is equal to 499! The outcome regression analysis suffers from extrapolation bias.\nMatching Procedure\nWe now implement a simple matching where:\nWe implement below a propensity score matching procedure where:\nEach treated is matched to its most similar control unit. This is a 1:1 nearest neighbor matching without replacement.\nThe distance metric used for the matching is the propensity score.\nWe vary the matching distance (the caliper), which is expressed in standard deviation of the propensity score distribution. Lower value of the caliper implies a stricter matching procedure.\nPropensity Score Function\nWe display below the code for the function ps_function() which runs the matching procedure. It takes two inputs: (i) a dataset and (ii) the value of the caliper.\n\n\n# propensity score analysis function\nps_function <- function(data, caliper_value) {\n  # implements the propensisty score matching\n  matching_results <- matchit(\n    treatment ~ id,\n    distance = data$true_ps,\n    caliper = caliper_value,\n    data = data\n  )\n  # retrieves the matched dataset\n  data_matched <- match.data(matching_results)\n  \n  # computes the proportion of matched treated units\n  proportion_matched <-\n    sum(data_matched$treatment) / sum(data$treatment) * 100\n  \n  # compute the true causal effect for matched units\n  true_effect <-\n    mean(data_matched$y_1[data_matched$treatment == 1]) - mean(data_matched$y_0[data_matched$treatment == 1])\n  \n  # estimate the causal effect with a simple regression model\n  model_fit <- lm(y_obs ~ treatment,\n                  data = data_matched,\n                  weights = weights)\n  \n  ps_att <-\n    broom::tidy(coeftest(model_fit, vcov. = vcovCL, cluster = ~ subclass),\n                conf.int = TRUE) %>%\n    filter(term == \"treatment\") %>%\n    select(term, estimate, p.value, conf.low, conf.high)\n  \n  # return relevant statistics\n  return(\n    bind_cols(\n      ps_att,\n      proportion_matched = proportion_matched,\n      true_effect = true_effect\n    )\n  )\n}\n\n\n\nWe run the function on the dataset we previously created:\n\n\n# testing the function\nps_function(data, caliper = 0.5) %>% \n  mutate_at(vars(-term), ~ round(., 1)) %>% \n  kable(., align = c(\"l\", rep('c', 6)))\n\n\nterm\nestimate\np.value\nconf.low\nconf.high\nproportion_matched\ntrue_effect\ntreatment\n136.9\n0\n64.5\n209.2\n77.9\n100\n\nThe function returns the estimate for the ATT, the associated \\(p\\)-value and 95% confidence interval, the proportion of matched treated unit and the true value of the ATT.\nSimulations\nWe implement Monte-Carlo 300 simulations for different values of the caliper (it currently takes 24 minutes to run on a laptop computer):\n\n\nsim_matching <- tibble(sim_id = 1:1000) %>%\n  # then simulate data\n  mutate(data = map(\n    sim_id,\n    ~ pmap_dfr(baseline_param_match, generate_data_matching)\n  )) %>%\n  # generate caliper\n  crossing(caliper = c(0.01, seq(0.05, 0.4, 0.05), seq(0.4, 1, 0.1))) %>%\n  # finally run the matching analysis\n  mutate(results = map2(data, caliper, ~ ps_function(.x, .y)))\n\nsim_matching <- sim_matching %>%\n  select(-data) %>%\n  unnest(results)\n\n# saveRDS(sim_matching, here(\"Outputs/sim_matching.RDS\"))\n\n\n\nOnce the simulations have been run, we compute the summary statistics using the summarise_simulations() function. We denote \\(\\tau\\) the true value of the causal estimand and \\(\\widehat{\\tau}\\) its estimate. To illastrue the consequences of a loss of statistical power with lower values of the caliper, we compare \\(\\mathbb{E}\\left[\\left|\\frac{\\widehat{tau}}{\\tau}\\right|\\right]\\) and \\(\\mathbb{E}\\left[\\left|\\frac{\\widehat{\\tau}}{\\tau}\\right| | signif \\right]\\). The first term represents the bias and the second term represents the type M error.\n\n\n# load simulation results\nsim_matching <- readRDS(here(\"Outputs/sim_matching.RDS\"))\n\n# function to compute power, type m error and bias\nsummarise_sim_matching <- function(data) {\n  data %>%\n    mutate(significant = (p.value <= 0.05)) %>% \n    group_by(caliper) %>%\n    summarise(\n      proportion_matched = mean(proportion_matched),\n      power = mean(significant, na.rm = TRUE)*100, \n      type_m = mean(ifelse(significant, abs(estimate/true_effect), NA), na.rm = TRUE),\n      bias_signif = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup()\n} \n\n\n\nWe apply the function to data_simulations and plot the results:\n\n\n\n\n\n\nThe blue line indicates the inflation of all estimates, regardless of their statistical significance. As the value of the caliper increases, estimates are more biased: this is due to the fact that we are comparing units that are less similar. The yellow line represents the inflation of statistically significant estimates at the 5% level. We clearly see with this line the danger of editorial policies biased toward small \\(p\\)-values: with low values of the caliper, statistically significant estimates are inflated!\nWhy statistically significant estimates are inflated with low values of the caliper? The figure below gives the answer: as the value of the caliper decreases, the sample size of the matched sample is reduced and thereby the statistical power shrinks. Only large estimates can be statistically significant but these estimates are misleading.\n\n\n\n\n\n\n",
      "last_modified": "2022-03-01T23:21:33-05:00"
    },
    {
      "path": "RDD.html",
      "title": "Simulations RDD",
      "description": "In this document, we run a simulation exercise to illustrate how using a Regression Discontinuity Design (RDD) to avoid confounders may lead to a loss in power and inflated effect sizes.",
      "author": [
        {
          "name": "Vincent Bagilet",
          "url": "https://vincentbagilet.github.io/"
        },
        {
          "name": "Léo Zabrocki",
          "url": "https://www.parisschoolofeconomics.eu/en/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nSummary and intuition\nAn illustrative exampleModeling choices\nData generation\nEstimation\nOne simulation\nAll simulations\n\nAnalysis of the resultsQuick exploration\nComputing the bias and exaggeration ratio\nGraph\n\n\n\nbody {\ntext-align: justify}\nSummary and intuition\nIn the case of the RDD, the trade-off between avoiding confounding and inflated effect sizes due to low power issues is mediated by the size of the bandwidth considered in the analysis. The underlying idea is that the smaller the bandwidth, the more comparable units are and therefore the smaller the risk of confounding is. Yet, with a smaller bandwidth, sample size and thus power decrease, increasing the exaggeration ratio.\nAn illustrative example\nTo illustrate this trade-off, we consider a standard application of the RD design in economics of education where a grant or additional lessons are assigned based on the score obtained by students on a standardized test. Students with test scores below a given threshold receive the treatment while those above do not. Yet, students far above and far below the threshold may differ along unobserved characteristics such as ability. To limit this bias, the effect of the treatment is estimated by comparing the outcomes of students just below and just above this threshold. This enable to limit disparities in terms of unobserved characteristics.\nThistlewaite and Campbell (1960) introduced the concept of RDD using this type of quasi-experiment. In their paper, they take advantage of a sharp discontinuity in the assignment of an award (a Certificate of Merit) based on qualifying scores at a test. This type of analysis is still used today and many papers leveraging similar methodologies have been published since this seminal work. For instance, Jacob and Lefgren (2004) exploit this type of discontinuity to study the impact of summer school and grade retention programs on test scores. Students who score below a given score are required to attend a summer school and to retake the test. Students who do not pass the second have to repeat the grade.\nModeling choices\nIn the present analysis, we build our simulations to replicate a similar type of quasi-experiment. In our fictional example, all students scoring below a cutoff \\(C\\) in a qualification test are required to take additional lessons. We want to estimate the effect of these additional lessons on scores on a final test taken by all students a year later.\nWe assume that the final score of student \\(i\\), \\(Final_i\\), is correlated with their qualification score \\(Qual_i\\) and their treatment status \\(T_i\\), ie whether student \\(i\\) received additional lessons or not. We further assume that both qualification and final test scores are affected by students’ unobserved ability \\(U_i\\) in a non linear way.\nThe DGP can be represented using the following Directed Acyclic Graph (DAG):\n\n\n\nFinal test scores are thus defined as follows:\n\\[Final_{i} = \\alpha^{f} + \\beta T_i + \\gamma Qual_{i} +  \\delta^f f(U_i) + \\epsilon_{i}\\] Where \\(\\alpha^f\\) is a constant, \\(f\\) a non linear function and \\(e \\sim \\mathcal{N}(0, \\sigma_{e})\\) noise. The parameter of interest is \\(\\beta\\). Translating this into a potential outcomes framework, we have:\n\\(Final_i(0) = \\alpha^f + \\gamma Qual_{i} + \\delta^f f(U_i) + \\epsilon_{i}\\)\n\\(Final_i(1) = \\alpha^f + \\gamma Qual_{i} + \\beta + \\delta^f f(U_i) + \\epsilon_{i}\\)\nTo simplify, we consider the following assumptions:\nFull compliance and a sharp treatment allocation such that \\(T_i = \\mathbb{I}[Qual_{i} < C]\\). All students with a qualification score below the threshold are treated and receive additional lessons. None of the students with a qualification score above the threshold are treated.\nThe unobserved ability affects qualification and final test scores in a cubic way. A large ability has a strong positive impact on test scores. Similarly a particularly low ability strongly impacts test scores negatively. An average ability does not have much impact on test scores. Such a functional form seems realistic. Note that ability creates an OVB only if it has a non linear impact on test scores.\nWe assume constant treatment effects. This assumption is not necessary and our results hold if we consider non-constant treatment effects. We thus may drop this assumption in the future.\nWe assume that the unobserved availability affects the qualification and final score in a similar way and therefore with the same intensity \\(\\delta\\). However, since the unobserved ability affects the final score through the qualification score, we adjust for that so that the ability has actually the same effect on both test scores. As a consequence, \\(\\delta^f= \\delta \\times (1 - \\gamma)\\).\nMore precisely, we set:\n\\(N\\) the number of students\n\\(U \\sim \\mathcal{U}(-b_u, b_u)\\) the unobserved ability.\n\\(Qual_i = \\alpha^q + \\delta U_i^{3} + e^q_i\\) where \\(e^q \\sim \\mathcal{N}(0, \\sigma_q^{2})\\)\n\\(T_i = \\mathbb{I}[Qual_{i} < q_c]\\) where for now and for simplicity, \\(q_c\\) is a fixed grade threshold given as the quantile in the qualification score distribution.\n\\(e^f \\sim \\mathcal{N}(0, \\sigma_f^2)\\)\n\\(Final_{i} = \\alpha^F + \\beta T_i + \\gamma Qual_{i} + \\delta (1-\\gamma) U_i^{3} + e^f_{i}\\)\nData generation\nGenerating function\nWe write a simple function that generates the data. It takes as input the values of the different parameters and returns a data frame containing all the variables for this analysis.\nOnce the fake data is generated, to make things more realistic we consider our data as if it was actual data. We do not take advantage of our knowledge of the data generating process in the estimation procedure. However, we observe both potential outcomes and the unobserved ability. Note that, in a real world setting, one would generally know the value of the threshold (and thus of \\(q_c\\)). Based on that and to simplify the computation of the bandwidth, we store \\(q_c\\).\n\n\ngenerate_data_RDD <- function(N, \n                              bound_u,\n                              alpha_q, \n                              sigma_q, \n                              sigma_f, \n                              alpha_f, \n                              beta,\n                              gamma,\n                              delta,\n                              q_c) {\n  \n  data <- tibble(id = 1:N) %>% \n    mutate(\n      u = runif(nrow(.), -bound_u, bound_u),\n      e_q = rnorm(nrow(.), 0, sigma_q),\n      qual = alpha_q + delta*u^3 + e_q,\n      e_f = rnorm(nrow(.), 0, sigma_f),\n      treated = qual < quantile(qual, q_c),\n      final0 = alpha_f + gamma*qual + delta*(1-gamma)*u^3 + e_f,\n      final1 = final0 + beta,\n      final = final0 + beta*treated,\n      q_c = q_c\n    )\n  \n  return(data)\n}\n\n\n\nDefining the bandwidth\nIn a RDD, the model is estimated only for observations close enough to the threshold, ie in a given bandwidth. We therefore create a function to define this bandwidth by adding a variable to the data set treated_bw that is equal to NA if the observations is outside of the bandwidth, TRUE if the observation falls in the bandwidth and the student is treated and FALSE if the observation falls in the bandwidth and the student is not treated. The bandwidth parameter bw represents the proportion of units that are in the bandwidth. If bw = 0.1, 10% of the students are in the bandwidth for instance.\n\n\ndefine_bw <- function (data, bw) {\n  data <- data %>% \n    mutate(\n      treated_bw = ifelse(\n        dplyr::between(\n          qual, \n          quantile(qual, unique(q_c) - bw/2), \n          quantile(qual, unique(q_c) + bw/2)\n        ), \n        treated, \n        NA\n      )\n    )\n} \n\n\n\nBaseline parameters’ values\nWe set baseline values for the parameters to emulate a somehow realistic observational study in this field. We make the following assumptions:\nWe assumes that grades are SAT scores. One can think of the qualifying exam as a state level exam that gives the opportunity to students with lower grades to receive additional lessons. For simplicity, we assume that the scores have a mean of 1060 and standard error of 200 (based on statistics provided by the Department of Education). Since these scores depend on the unobserved ability, we adjust the values of the parameters to get appropriate distributions.\nTypical treatment effect sizes in economics of education are of the order of magnitude of 0.1 sd. Kraft 2020, reviewing 747 RCTs of education intervention finds that the median effect size is 0.1 sd. Interestingly, he finds that “larger studies with broad achievement measures have systematically smaller effect sizes”. This might hint to publication bias as he underlines. In studies with more than 2000 individuals, the median effect is 0.03 sd. The same median effect size is observed in preregistered studies. We therefore consider an effect size of 0.03 sd, ie \\(\\beta = 6 = 200\\times 0.03\\).\nWe assume that the unobserved ability is uniformly distributed between -2.5 and 2.5. We chose this values because it produces the right relationships between the variables.\nWe consider that the threshold is located at the center of the distribution (\\(q_c = 0.5\\)). The bandwidth is symmetric around the cutoff. Considering a cutoff in the middle of the distribution enables us to consider very wide bandwidths, up to including the whole sample in the analysis. Based on the functional form chosen for the effect of \\(U\\) on grades (\\(f: U \\mapsto U^3\\)), choosing a cutoff in the middle of the distribution enables to have units that are relatively similar in terms of unobserved variable close to the cut-off and different far away from it.\nThe set of parameters may produce test score outside of the range 0-100 in some iterations but that does not affect the analysis. We add the parameter value for delta separately as we will vary the value later and will reuse the vector baseline_param_RDD.\n\nN\nbound_u\nalpha_q\nsigma_q\nsigma_f\nalpha_f\nbeta\ngamma\nq_c\ndelta\n10000\n2.5\n1060\n100\n80\n540\n6\n0.5\n0.5\n30\n\nHere is an example of data created with our data generating process:\n\nid\nu\ne_q\nqual\ne_f\ntreated\nfinal0\nfinal1\nfinal\nq_c\n1\n2.0779949\n-79.70242\n1249.4850\n-4.548884\nFALSE\n1294.7873\n1300.7873\n1294.7873\n0.5\n2\n0.6324039\n6.51651\n1074.1041\n16.765798\nFALSE\n1097.6117\n1103.6117\n1097.6117\n0.5\n3\n-1.2121860\n10.68097\n1017.2456\n69.341049\nTRUE\n1091.2461\n1097.2461\n1097.2461\n0.5\n4\n-1.1414686\n-46.58832\n968.7934\n21.039500\nTRUE\n1023.1270\n1029.1270\n1029.1270\n0.5\n5\n-1.8997477\n-159.37910\n694.9329\n-5.346115\nTRUE\n779.2763\n785.2763\n785.2763\n0.5\n6\n0.0908274\n-40.97945\n1019.0430\n40.875984\nTRUE\n1090.4087\n1096.4087\n1096.4087\n0.5\n7\n-0.0649454\n-132.41446\n927.5773\n-60.113724\nTRUE\n943.6708\n949.6708\n949.6708\n0.5\n8\n1.5960237\n-36.34014\n1145.6260\n-19.746879\nFALSE\n1154.0492\n1160.0492\n1154.0492\n0.5\n9\n2.0110618\n69.80429\n1373.8086\n36.908192\nFALSE\n1385.8146\n1391.8146\n1385.8146\n0.5\n10\n1.3556211\n28.66920\n1163.4063\n27.404462\nFALSE\n1186.4762\n1192.4762\n1186.4762\n0.5\n\nWe check the standard deviation and means of the generated exam scores to make sure that they correspond to w to make:\n\nStatistic\nqual\nfinal0\nMean\n1060.2212\n1070.1451\nStandard Deviation\n203.9955\n201.1346\n\nExploring the data generated\nThe following graph illustrates this process by plotting final test scores against qualification ones depending on the value of treated_bw.\n\n\n\nThen, we quickly look at the distributions of the different variables to check that they have a shape similar to what we expect.\n\n\n\nWe then look at relation between the qualifying score and the unobserved ability. This enables us to understand how where the bias comes form:\n\n\n\nEstimation\nAfter generating the data, we can run an estimation.\nNote that to run power calculations, we need to have access to the true effects. Therefore, before running the estimation, we write a short function to compute the average treatment effect on the treated (ATET). We will add this information to the estimation results.\n\n\ncompute_true_effect_RDD <- function(data) {\n  treated_data <- data %>% \n    filter(treated) \n  return(mean(treated_data$final1 - treated_data$final0))\n}  \n\n\n\nWe then run the estimation. To do so, we only consider observations within the bandwidth and regress the final test scores on the treatment, the qualification score and their interaction. Note that we include this interaction term to allow more flexibility and to mimic an realistic estimation. Yet, we know that this interaction term does not appear in the DGP. Including it or not do not change the results. Also note that, of course, we do not include the unobserved ability in this model to create an OVB.\n\n\nestimate_RDD <- function(data, bw) {\n  data_in_bw <- data %>% \n    define_bw(bw = bw) %>% \n    filter(!is.na(treated_bw))\n  \n  reg <- lm(\n    data = data_in_bw, \n    formula = final ~ treated + qual\n  ) %>% \n    broom::tidy() %>%\n    filter(term == \"treatedTRUE\") %>%\n    rename(p_value = p.value, se = std.error) %>%\n    select(estimate, p_value, se) %>%\n    mutate(\n      true_effect = compute_true_effect_RDD(data),\n      bw = bw\n    )\n  \n  return(reg)\n}\n\n\n\nOne simulation\nWe can now run a simulation, combining generate_data_RDD and estimate_RDD. To do so we create the function compute_sim_RDD. This simple function takes as input the various parameters along with a vector of bandwidth sizes, vect_bw. If we want to run several simulations with different bandwidths, we can reuse the same data, hence why we allow to passing a vector of bandwidths and not only one bandwidth. The function returns a table with the estimate of the treatment, its p-value and standard error, the true effect and the bandwidth and intensity of the OVB considered (delta). Note for now, that we do not store the values of the other parameters for simplicity because we consider them fixed over the study.\n\n\ncompute_sim_RDD <- function(N,\n                            bound_u,\n                            alpha_q,\n                            sigma_q,\n                            sigma_f,\n                            alpha_f,\n                            beta,\n                            gamma,\n                            delta,\n                            q_c,\n                            vect_bw) {\n  \n  data <- generate_data_RDD(\n    N = N,\n    bound_u = bound_u,\n    alpha_q = alpha_q,\n    sigma_q = sigma_q,\n    sigma_f = sigma_f,\n    alpha_f = alpha_f,\n    beta = beta,\n    gamma = gamma,\n    delta = delta,\n    q_c = q_c\n  ) \n  \n  map_dfr(vect_bw, estimate_RDD, data = data) %>%\n    mutate(delta = delta)\n} \n\n\n\nHere is an example of an output of this function.\n\nestimate\np_value\nse\ntrue_effect\nbw\ndelta\n14.104915\n0.1926161\n10.818637\n6\n0.1\n30\n7.876663\n0.2863384\n7.385706\n6\n0.2\n30\n\nAll simulations\nWe will run the simulations for different sets of parameters by mapping our compute_sim_RDD function on each set of parameters. We thus create a table with all the values of the parameters we want to test param_rdd. Note that in this table each set of parameters appears n_iter times as we want to run the analysis \\(n_{iter}\\) times for each set of parameters.\n\n\n# simple_param_RDD <- tibble(\n#   N = 1000,\n#   bound_u = 1,\n#   alpha_q = 0,\n#   sigma_q = 1,\n#   sigma_f = 0.5,\n#   alpha_f = 1,\n#   beta = 0.7,\n#   gamma = 0.7,\n#   q_c = 0.5,\n#   delta = 3,\n#   vect_bw = 0.1\n# )\n\nfixed_param_RDD <- baseline_param_RDD %>% #%>% rbind(...)\n  mutate(vect_bw = 0.1)\n# vect_bw <- seq(0.05, 0.4, 0.05)\nvect_bw <- c(seq(0.1, 0.4, 0.05), seq(0.4, 0.9, 0.1))\n# vect_delta <- c(3)\nn_iter <- 1000\n\nparam_rdd <- fixed_param_RDD %>% \n  select(-vect_bw) %>% #parameters we modify\n  # crossing(delta = vect_delta) %>% \n  mutate(vect_bw = list(vect_bw)) %>% \n  crossing(rep_id = 1:n_iter) %>% \n  select(-rep_id)\n\n\n\nWe then run the simulations by mapping our compute_sim_RDD function on param_rdd.\n\n\ntic()\nsim_rdd <- pmap_dfr(param_rdd, compute_sim_RDD)\nbeep()\ntoc()\n\n# saveRDS(sim_rdd, here(\"Outputs/sim_rdd.RDS\"))\n\n\n\nAnalysis of the results\nQuick exploration\nFirst, we quickly explore the results. In the following figure, we can see that for small bandwidth estimates are unbiased but imprecise while for large bandwidths estimates are precise but biased.\n\n\n\nWhen the bandwidth is relatively small, estimates are spread out and the mean of statistically significant estimates is larger than the true effect. Note that the average of all estimates, significant and non-significant, is close to the true effect. Applying a statistical significance filter leads to overestimate the true effect in this case.\n\n\n\nComputing the bias and exaggeration ratio\nWe want to compare \\(\\mathbb{E}\\left[\\frac{\\widehat{\\beta_{RDD}}}{\\beta_0}\\right]\\) and \\(\\mathbb{E}\\left[\\frac{\\widehat{\\beta_{RDD}}}{\\beta_0} | \\text{signif} \\right]\\). The first term represents the bias and the second term represents the exaggeration ratio. This terms depend on the true effect size. To enable comparison across simulations and getting terms independent of effect sizes, we also compute the average of the ratios between the estimate and the true effect, conditional on significance.\n\n\nsummarise_simulations <- function(data) {\n  data %>%\n    mutate(significant = (p_value <= 0.05)) %>% \n    group_by(delta, bw) %>%\n    summarise(\n      power = mean(significant, na.rm = TRUE)*100, \n      type_m = mean(ifelse(significant, estimate/true_effect, NA), na.rm = TRUE),\n      bias_all = mean(estimate/true_effect, na.rm = TRUE),\n      .groups  = \"drop\"\n    ) %>% \n    ungroup()\n}\n\nsummary_sim_rdd <- summarise_simulations(sim_rdd)\n# saveRDS(summary_sim_rdd, here(\"Outputs/summary_sim_rdd.RDS\"))\n\n\n\nGraph\nTo analyze our results, we build a unique and simple graph:\n\n\n\nWe notice that, the smaller the bandwidth size, the closer the average of all estimates is to the true effect. Yet, when the bandwidth gets small significant estimates overestimate the true effect. This arises because of a loss of power, as shown in the graph below.\n\n\nsummary_sim_rdd %>% \n  ggplot(aes(x = bw, y = power)) + \n  geom_line(size = 0.8) +\n  labs(\n    x = \"Bandwidth size\",\n    y = \"Power\",\n    title = \"Evolution of power with bandwith size\",\n    caption = \"Bandwidth size as a proportion of the total number of observations\"\n  ) \n\n\n\n\n\n\n\n",
      "last_modified": "2022-03-01T23:21:57-05:00"
    },
    {
      "path": "summary.html",
      "title": "Plain language summary",
      "description": "In this paper, we show that, combined with current academic publication practices, front line empirical methods, efficient to identify how a factor causes another, may be more likely to exaggerate effect sizes.\n",
      "author": [],
      "contents": "\nEmpirical studies often aim to get a sense of how a factor causes another. For instance, one may want to evaluate the impact of a professional training program on wages. Such effects are often challenging to estimate. A simple difference between the wages of people who participated in the program or not may not reflect the actual wage increase brought by the program. For instance, it might be the case that people who participated in the program would have earned higher wages even if they did not take the training. To measure the actual magnitude of the effect of the program, researchers use a particular set of methods, causal inference methods. In this paper, we show how academic publication practices can lead these otherwise effective methods to yield incorrect effect sizes.\nThese methods yield, on average, the true effect. However they can be imprecise, meaning that the range of possible values for the true effect they produce can be wide. Since, studies are often only carried out once, it might be the case that, by chance, a given study would produce an effect far away from the true effect. On the other hand, we know that publication practices favor effects that are clearly different from zero, ie larger. Combining these publication practices and this relative imprecision of causal inference methods thus creates another type of problem leading results to possibly differ from the true effect. Hence, these methods enable to avoid a first problem but are also more prone to another problem. In this paper, we show that there is a trade-off between these two problems.\nTo do so we build simulations, generating fake data representative of real life questions. We use simulations because to evaluate how far the result of an analysis is from the true effect, one needs to know this true effect. In real life cases, the true effect is never known.\nRecommendations\n\n\n\n",
      "last_modified": "2022-03-01T23:21:58-05:00"
    }
  ],
  "collections": []
}
